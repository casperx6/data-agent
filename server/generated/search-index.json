{
  "lastUpdated": "2025-07-30T20:30:09.485Z",
  "servers": [
    {
      "name": "notion",
      "displayName": "notion",
      "description": "Notion MCP",
      "category": "registry",
      "searchKeywords": "notion notion notion mcp search fetch create-pages update-page move-pages duplicate-page create-database update-database create-comment get-comments get-users get-self get-user perform a search over:\n- \"internal\": perform a semantic search over your entire notion workspace and connected\nsources (slack, google drive, github, jira, microsoft teams, sharepoint, onedrive, or\nlinear).\n- \"users\": perform a search over the notion users in the current workspace.\nyou can use search when you need to find information which is not already available via\nother tools, and you don't know where it's located.\nif the user doesn't have access to notion ai features, the search will automatically fall\nback to a workspace search that doesn't use ai or include connected sources. this will be\nindicated by the \"type\" field in the response being \"workspace_search\" instead of\n\"ai_search\".\ndo not use search to get information about a database's integrations, views, or other\ncomponents.\nif initial results do not contain all the information you need, you can try more specific\nqueries.\nafter obtaining internal search results, if the user asks for the full contents of a page or\ndatabase, use the \"fetch\" tool. this tool only shows some details like a highlight and the\nurl and title of each search result.\nto find pages under a notion database, use this tool and supply the database's url as the\ndata_source_url parameter. these look like \"collection://f336d0bc-b841-465b-8045-024475c079dd\".\nyou can get this url by using the \"fetch\" tool to view the database and copying the url from\nthe <data-source url=\"...\"> block. keep in mind that notion-flavored markdown has this\nconcept of a hierarchy of <database> blocks that contain <data-source> blocks, but users\naren't familiar with the notion \"data source\" terminology or product. prefer to refer to\nboth of them as \"databases\" in your response to humans to avoid confusion.\nexamples of searches:\n1. search for information across the workspace:\n{\n\"query\": \"quarterly revenue report\",\n\"query_type\": \"internal\"\n}\n2. search within a specific page and its children:\n{\n\"query\": \"meeting notes action items\",\n\"query_type\": \"internal\",\n\"page_url\": \"https://www.notion.so/workspace/team-hub-1234567890abcdef\"\n}\n3. search within a database's pages:\n{\n\"query\": \"design review feedback\",\n\"query_type\": \"internal\",\n\"data_source_url\": \"collection://f336d0bc-b841-465b-8045-024475c079dd\"\n}\n4. search within a specific teamspace:\n{\n\"query\": \"project updates\",\n\"query_type\": \"internal\",\n\"teamspace_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"\n}\n5. search for users:\n{\n\"query\": \"john@example.com\",\n\"query_type\": \"user\"\n}\n6. find users by partial name:\n{\n\"query\": \"sarah\",\n\"query_type\": \"user\"\n}\ncommon use cases:\n- \"what does the sales team require from the product team in the next quarter?\"\n- \"find all meeting notes that mention the new pricing strategy\"\n- \"which pages discuss the api migration project?\"\n- \"find all team members with email addresses ending in @design.company.com\"\n- \"what are the latest updates on the mobile app redesign?\" retrieves details about a notion entity by its url or id.\nyou can fetch the following types of entities:\n- page, i.e. from a <page> block or a <mention-page> mention\n- database, i.e. from a <database> block or a <mention-database> mention\nuse the \"fetch\" tool when you need to see the details of a notion entity you already know\nexists and have its url or id.\nprovide the notion entity's url or id in the `id` parameter. you must make multiple calls\nto the \"fetch\" tool if you want to fetch multiple entities.\ncontent for pages that are returned use the enhanced markdown format, which is a superset of\nthe standard markdown syntax. see the full spec in the description of the \"create-pages\"\ntool.\nnotion does not currently have a public concept of data sources, and only supports databases.\nwhen rendering the response from this tool, assume the database only has one data source and\ndisplay the details of the data source as the database, removing any mention of \"data\nsources\" from the result.\nexamples of fetching entities:\n1. fetch a page by url:\n{\n\"id\": \"https://www.notion.so/workspace/product-requirements-1234567890abcdef\"\n}\n2. fetch a page by id (uuidv4 with dashes):\n{\n\"id\": \"12345678-90ab-cdef-1234-567890abcdef\"\n}\n3. fetch a page by id (uuidv4 without dashes):\n{\n\"id\": \"1234567890abcdef1234567890abcdef\"\n}\n4. fetch a database:\n{\n\"id\": \"https://www.notion.so/workspace/projects-database-abcdef1234567890\"\n}\ncommon use cases:\n- \"what are the product requirements still need to be implemented from this ticket\nhttps://notion.so/page-url?\"\n- \"show me the details of the project database at this url\"\n- \"get the content of page 12345678-90ab-cdef-1234-567890abcdef\" creates one or more notion pages with specified properties and content.\nuse \"create-pages\" when you need to create one or more new pages that don't exist yet.\nalways include a title property under `properties` in each entry of the `pages` array.\notherwise, the page title will appear blank even if the page content is populated. don't\nduplicate the page title at the top of the page's `content`.\nwhen creating pages under a notion database, the property names must match the database's\nschema. use the \"fetch\" tool with a notion database url to get the database schema. or, look\nfor existing pages under the database using the \"search\" tool then use the \"fetch\" tool to see\nthe names of the property keys. one exception is the \"title\" property, which all pages have,\nbut can be named differently in the schema of a database. for convenience, you can use the\ngeneric property name \"title\" in the \"properties\" object, and it will automatically be\nre-mapped to the actual name of the title property in the database schema when creating the\npage.\nall pages created with a single call to this tool will have the same parent.\nthe parent can be a notion page or database. if the parent is omitted, the pages will be\ncreated as standalone, workspace-level private pages and the person that created them\ncan organize them as they see fit later.\nexamples of creating pages:\n1. create a standalone page with a title and content:\n{\n\"pages\": [\n{\n\"properties\": {\"title\":\"page title\"},\n\"content\": \"# section 1\nsection 1 content\n# section 2\nsection 2 content\"\n}\n]\n}\n2. create a page in a tasks database with url {{3}} and properties \"task name\" and \"status\":\n{\n\"parent\": {\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"},\n\"pages\": [\n{\n\"properties\": {\n\"task name\": \"task 123\",\n\"status\": \"in progress\",\n},\n},\n],\n}\n3. create a page with an existing page as a parent:\n{\n\"parent\": {\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"},\n\"pages\": [\n{\n\"properties\": {\"title\": \"page title\"},\n\"content\": \"# section 1\nsection 1 content\n# section 2\nsection 2 content\"\n}\n]\n}\nthe enhanced markdown format used for page content is a superset of the standard markdown\nsyntax. here is the full spec, but please note that notion does not yet use the data source\nterminology, and only supports databases. ignore anything related to \"data sources\" and assume\ndatabases can only define one schema for now.\nnotion-flavored markdown is a variant of standard markdown with additional features to support all block and rich text types.\nuse tabs for indentation.\nuse backslashes to escape characters. for example, * will render as * and not as a bold delimiter.\nblock types:\nmarkdown blocks use a {color=\"color\"} attribute list to set a block color.\ntext:\nrich text {color=\"color\"}\nchildren\nheadings:\n# rich text {color=\"color\"}\n## rich text {color=\"color\"}\n### rich text {color=\"color\"}\n(headings 4, 5, and 6 are not supported in notion and will be converted to heading 3.)\nbulleted list:\n- rich text {color=\"color\"}\nchildren\nnumbered list:\n1. rich text {color=\"color\"}\nchildren\nquote:\n> rich text {color=\"color\"}\nchildren\nto-do:\n- [ ] rich text {color=\"color\"}\nchildren\n- [x] rich text {color=\"color\"}\nchildren\ntoggle:\n▶ rich text {color=\"color\"}\nchildren\ntoggle heading 1:\n▶# rich text {color=\"color\"}\nchildren\ntoggle heading 2:\n▶## rich text {color=\"color\"}\nchildren\ntoggle heading 3:\n▶### rich text {color=\"color\"}\nchildren\nfor toggles and toggle headings, the children must be indented in order for them to be toggleable. if you do not indent the children, they will not be contained within the toggle or toggle heading.\ndivider:\n---\ntable:\n| rich text | rich text |\n| --- | --- |\n| rich text | rich text |\nequation:\n$$\nequation\n$$\ncode:\n```language\ncode\n```\nxml blocks use the \"color\" attribute to set a block color.\ncallout:\n<callout icon?=\"emoji\" color?=\"color\">\nchildren\n</callout>\ncolumns:\n<columns>\n<column>\nchildren\n</column>\n<column>\nchildren\n</column>\n</columns>\npage:\n<page url=\"{{url}}\" color?=\"color\">title</page>\nsub-pages can be viewed using the \"view\" tool.\nto create a new sub-page, omit the url. you can then update the page content and properties with the \"update-page\" tool. example: <page>new page</page>\ndatabase:\n<database url=\"{{url}}\" inline?=\"{true|false}\" color?=\"color\">title</database>\nto create a new database, omit the url. you can then update the database properties and content with the \"update-database\" tool. example: <database>new database</database>\nthe \"inline\" toggles how the database is displayed in the ui. if it is true, the database is fully visible and interactive on the page. if false, the database is displayed as a sub-page.\nthere is no \"data source\" block type. data sources are always inside a database, and only databases can be inserted into a page.\naudio:\n<audio source=\"{{url}}\" color?=\"color\">caption</audio>\nfile:\nfile content can be viewed using the \"view\" tool.\n<file source=\"{{url}}\" color?=\"color\">caption</file>\nimage:\nimage content can be viewed using the \"view\" tool.\n<image source=\"{{url}}\" color?=\"color\">caption</image>\npdf:\npdf content can be viewed using the \"view\" tool.\n<pdf source=\"{{url}}\" color?=\"color\">caption</pdf>\nvideo:\n<video source=\"{{url}}\" color?=\"color\">caption</video>\ntable of contents:\n<table_of_contents color?=\"color\"/>\nsynced block:\nthe original source for a synced block.\nwhen creating a new synced block, do not provide the url. after inserting the synced block into a page, the url will be provided.\n<synced_block url=?\"{{url}}\">\nchildren\n</synced_block>\nsynced block reference:\na reference to a synced block.\nthe synced block must already exist and url must be provided.\nyou can directly update the children of the synced block reference and it will update both the original synced block and the synced block reference.\n<synced_block_reference url=\"{{url}}\">\nchildren\n</synced_block_reference>\ntranscription:\n<transcription>\nrich text (transcript title)\n<summary>\nai-generated summary of the notes + transcript\n</summary>\n<notes>\nuser notes\n</notes>\n<transcript>\ntranscript of the audio (cannot be edited)\n</transcript>\n</transcription>\nnote: the <transcript> tag contains a raw transcript and cannot be edited.\nunknown (a block type that is not supported in the api yet):\n<unknown url=\"{{url}}\" alt=\"alt\"/>\nrich text types:\nbold:\n**rich text**\nitalic:\n*rich text*\nstrikethrough:\n~~rich text~~\nunderline:\n<span underline=\"true\">rich text</span>\nstrikethrough:\n~~rich text~~\ninline code:\n`code`\nlink:\n[link text](url)\ncitation:\n[^url]\nto create a citation, you can either reference a compressed url like [^{{1}}], or a full url like [^https://example.com].\ncolors:\n<span color?=\"color\">rich text</span>\ninline math:\n$equation$ or $`equation`$ if you want to use markdown delimiters within the equation.\nthere must be whitespace before the starting $ symbol and after the ending $ symbol. there must not be whitespace right after the starting $ symbol or before the ending $ symbol.\ninline line breaks within rich text:\n<br>\nmentions:\n,\nuser:\n<mention-user url=\"{{url}}\">user name</mention-user>\nthe url must always be provided, and refer to an existing user.\nproviding the user name is optional. in the ui, the name will always be displayed.\npage:\n<mention-page url=\"{{url}}\">page title</mention-page>\nthe url must always be provided, and refer to an existing page.\nproviding the page title is optional. in the ui, the title will always be displayed.\nmentioned pages can be viewed using the \"view\" tool.\ndatabase:\n<mention-database url=\"{{url}}\">database name</mention-database>\nthe url must always be provided, and refer to an existing database.\nproviding the database name is optional. in the ui, the name will always be displayed.\nmentioned databases can be viewed using the \"view\" tool.\ndate:\n<mention-date start=\"yyyy-mm-dd\" end=\"yyyy-mm-dd\"/>\ndatetime:\n<mention-date start=\"yyyy-mm-ddthh:mm:ssz\" end=\"yyyy-mm-ddthh:mm:ssz\"/>\ncustom emoji:\n:emoji_name:\ncustom emoji are rendered as the emoji name surrounded by colons.\ncolors:\nonly use colors in markdown blocks when the user has explicitly asked for them.\ntext colors (renders as colored text a transparent background):\ngray,brown,orange,yellow,green,blue,purple,pink,red\nbackground colors (renders as colored background with contrasting text):\ngray_bg,brown_bg,orange_bg,yellow_bg,green_bg,blue_bg,purple_bg,pink_bg,red_bg update a notion page's properties or content.\nnotion page properties are a json map of property names to sqlite values.\nfor pages in a database, use the sqlite schema definition shown in <database>.\nfor pages outside of a database, the only allowed property is \"title\", which is the title of\nthe page and is automatically shown at the top of the page as a large heading.\nnotion page content is a string in notion-flavored markdown format. see the \"create-pages\"\ntool description for the full enhanced markdown spec.\nbefore updating a page's content with this tool, use the \"fetch\" tool first to get the\nexisting content to find out the markdown snippets to use in the \"replace_content_range\" or\n\"insert_content_after\" commands.\nexamples:\n(1) update page properties:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"update_properties\",\n\"properties\": {\n\"title\": \"new page title\",\n\"status\": \"in progress\",\n\"checkbox\": \"__yes__\"\n}\n}\nuse the \"fetch\" tool to find the existing properties of the page to make sure your changes\ninclude all property names and values, and are spelled correctly, for pages under a database.\na title property is required for pages in a database but may not be named \"title\" so be sure\nto use the correct property name. for pages outside of a database, the only allowed property\nis \"title\" and it will always be named \"title\".\n(2) replace the entire content of a page:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"replace_content\",\n\"new_str\": \"# new section\nupdated content goes here\"\n}\n(3) replace specific content in a page:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"replace_content_range\",\n\"selection_with_ellipsis\": \"# old section...end of section\",\n\"new_str\": \"# new section\nupdated content goes here\"\n}\nremember you should not include the entire string to replace, only the first ~10 characters,\nan ellipsis, and the last ~10 characters.\nhowever, the start and end of the range must have enough characters to be able to uniquely\nidentify the range in the page; do not use an ambiguous or repeated selection.\nif you get errors, try using a longer or different selection.\n(4) insert content after specific text:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"insert_content_after\",\n\"selection_with_ellipsis\": \"## previous section...\",\n\"new_str\": \"\n## new section\ncontent to insert goes here\"\n} move one or more notion pages or databases to a new parent. duplicate a notion page. the page must be within the current workspace, and you must have permission to access it. the duplication completes asynchronously, so do not rely on the new page identified by the returned id or url to be populated immediately. let the user know that the duplication is in progress and that they can check back later using the 'fetch' tool or by clicking the returned url and viewing it in the notion app. creates a new notion database with the specified properties. update a notion database's properties, name, description, or other attributes.\nthe tool returns a rendered markdown string showing the updated database structure,\nincluding its properties, data sources, and schema information.\ndatabase properties define the columns/fields that pages in the database can have.\neach property has a type (text, number, select, etc.) and configuration options.\nexamples:\n(1) update database title and description:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"title\": [{\"type\": \"text\", \"text\": {\"content\": \"project tracker 2024\"}}],\n\"description\": [{\"type\": \"text\", \"text\": {\"content\": \"track all projects and deliverables\"}}]\n}\n(2) add new properties to a database:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"priority\": {\n\"select\": {\n\"options\": [\n{\"name\": \"high\", \"color\": \"red\"},\n{\"name\": \"medium\", \"color\": \"yellow\"},\n{\"name\": \"low\", \"color\": \"green\"}\n]\n}\n},\n\"due date\": {\"date\": {}},\n\"assigned to\": {\"people\": {}}\n}\n}\n(3) rename an existing property (use the property id or current name):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"status\": {\"name\": \"project status\"}\n}\n}\n(4) remove a property (set to null):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"old property\": null\n}\n}\n(5) change display mode from inline to full page:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"is_inline\": false\n}\n(6) move database to trash (warning: cannot be undone without going to the notion app ui so\nexplicitly confirm with the user that they really want to do this):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"in_trash\": true\n}\ncommon property types:\n- title: the main property (required, cannot be deleted)\n- rich_text: multi-line text\n- number: numeric values with optional formatting\n- select: single choice from options\n- multi_select: multiple choices from options\n- date: date with optional time\n- people: user references\n- checkbox: boolean values\n- url: web links\n- email: email addresses\n- phone_number: phone numbers\n- formula: calculated values based on other properties\n- relation: links to pages in another database\n- rollup: aggregated values from related pages\nnotes:\n- you cannot delete or create new title properties\n- a database can only have one unique_id property\n- synced databases cannot be updated\n- use the \"fetch\" tool first to see the current database schema add a comment to a page get all comments of a page list all users retrieve your token's bot user retrieve a user registry",
      "toolCount": 13,
      "toolNames": [
        "search",
        "fetch",
        "create-pages",
        "update-page",
        "move-pages",
        "duplicate-page",
        "create-database",
        "update-database",
        "create-comment",
        "get-comments",
        "get-users",
        "get-self",
        "get-user"
      ],
      "status": "online"
    },
    {
      "name": "linear",
      "displayName": "linear",
      "description": "Linear OAuth Proxy",
      "category": "registry",
      "searchKeywords": "linear linear linear oauth proxy list_comments create_comment list_cycles get_document list_documents get_issue list_issues create_issue update_issue list_issue_statuses get_issue_status list_my_issues list_issue_labels list_projects get_project create_project update_project list_project_labels list_teams get_team list_users get_user search_documentation retrieve comments for a linear issue by id create a comment on a linear issue by id retrieve cycles for a linear team by id retrieve a linear document by id or slug list documents in the user's linear workspace retrieve a linear issue details by id, including attachments and git branch name list issues in the user's linear workspace create a new linear issue update an existing linear issue list available issues statuses in a linear team retrieve details of a specific issue status in linear by name or id list issues assigned to the current user list available issue labels in a linear workspace or team list projects in the user's linear workspace retrieve details of a specific project in linear create a new project in linear update an existing linear project list available project labels in the linear workspace list teams in the user's linear workspace retrieve details of a specific linear team retrieve users in the linear workspace retrieve details of a specific linear user search linear's documentation to learn about features and usage registry",
      "toolCount": 23,
      "toolNames": [
        "list_comments",
        "create_comment",
        "list_cycles",
        "get_document",
        "list_documents",
        "get_issue",
        "list_issues",
        "create_issue",
        "update_issue",
        "list_issue_statuses",
        "get_issue_status",
        "list_my_issues",
        "list_issue_labels",
        "list_projects",
        "get_project",
        "create_project",
        "update_project",
        "list_project_labels",
        "list_teams",
        "get_team",
        "list_users",
        "get_user",
        "search_documentation"
      ],
      "status": "online"
    },
    {
      "name": "hyperbrowser",
      "displayName": "hyperbrowser",
      "description": "hyperbrowser",
      "category": "registry",
      "searchKeywords": "hyperbrowser hyperbrowser hyperbrowser scrape_webpage crawl_webpages extract_structured_data browser_use_agent openai_computer_use_agent claude_computer_use_agent search_with_bing create_profile delete_profile list_profiles scrape a webpage and extract its content in various formats. this tool allows fetching content from a single url with configurable browser behavior options. use this for extracting text content, html structure, collecting links, or capturing screenshots of webpages. crawl a website starting from a url and explore linked pages. this tool allows systematic collection of content from multiple pages within a domain. use this for larger data collection tasks, content indexing, or site mapping. extract structured data from a webpage. this tool allows you to extract structured data from a webpage using a schema. this tool employs an open-source browser automation agent optimized specifically for fast, efficient, and cost-effective browser tasks using a cloud browser. it requires explicit, detailed instructions to perform highly specific interactions quickly.\n\noptimal for tasks requiring:\n- precise, explicitly defined interactions and actions\n- speed and efficiency with clear, unambiguous instructions\n- cost-effective automation at scale with straightforward workflows\n\nbest suited use cases include:\n- explicitly defined registration and login processes\n- clearly guided navigation through web apps\n- structured, step-by-step web scraping with detailed guidance\n- extracting data via explicitly specified browser interactions\n\nyou must provide extremely detailed step-by-step instructions, including exact elements, actions, and explicit context. clearly define the desired outcome for optimal results. returns the completed result or an error message if issues arise.\n\nnote: this agent trades off flexibility for significantly faster performance and lower costs compared to claude and openai agents. this tool utilizes openai's model to autonomously execute general-purpose browser-based tasks with balanced performance and reliability using a cloud browser. it handles complex interactions effectively with practical reasoning and clear execution.\n\noptimal for tasks requiring:\n- reliable, general-purpose browser automation\n- clear, structured interactions with moderate complexity\n- efficient handling of common web tasks and workflows\n\nbest suited use cases include:\n- standard multi-step registration or form submissions\n- navigating typical web applications requiring multiple interactions\n- conducting structured web research tasks\n- extracting data through interactive web processes\n\nprovide a clear step-by-step description, necessary context, and expected outcomes. returns the completed result or an error message if issues arise. this tool leverages anthropic's claude model to autonomously execute complex browser tasks with sophisticated reasoning capabilities using a cloud browser. it specializes in handling intricate, nuanced, or highly context-sensitive web interactions.\n\noptimal for tasks requiring:\n- complex reasoning over multiple web pages\n- nuanced interpretation and flexible decision-making\n- human-like interaction with detailed context awareness\n\nbest suited use cases include:\n- multi-step processes requiring reasoning (e.g., detailed registrations or onboarding)\n- interacting intelligently with advanced web apps\n- conducting in-depth research with complex conditions\n- extracting information from dynamic or interactive websites\n\nprovide detailed task instructions, relevant context, and clearly specify the desired outcome for best results. returns the completed result or an error message if issues arise. search the web using bing. this tool allows you to search the web using bing.com creates a new persistent hyperbrowser profile. deletes an existing persistent hyperbrowser profile. lists existing persistent hyperbrowser profiles, with optional pagination. registry",
      "toolCount": 10,
      "toolNames": [
        "scrape_webpage",
        "crawl_webpages",
        "extract_structured_data",
        "browser_use_agent",
        "openai_computer_use_agent",
        "claude_computer_use_agent",
        "search_with_bing",
        "create_profile",
        "delete_profile",
        "list_profiles"
      ],
      "status": "online"
    }
  ]
}