{
  "lastUpdated": "2025-07-30T20:30:09.485Z",
  "totalServers": 3,
  "servers": [
    {
      "name": "notion",
      "displayName": "notion",
      "connection": {
        "type": "command",
        "command": "npx",
        "args": [
          "-y",
          "mcp-remote",
          "https://mcp.notion.com/sse"
        ],
        "env": {}
      },
      "description": "Notion MCP",
      "category": "registry",
      "version": "1.0.0",
      "mcpVersion": "2024-11-05",
      "tools": [
        {
          "name": "search",
          "description": "Perform a search over:\n- \"internal\": Perform a semantic search over your entire Notion workspace and connected\nsources (Slack, Google Drive, Github, Jira, Microsoft Teams, Sharepoint, OneDrive, or\nLinear).\n- \"users\": Perform a search over the Notion users in the current workspace.\nYou can use search when you need to find information which is not already available via\nother tools, and you don't know where it's located.\nIf the user doesn't have access to Notion AI features, the search will automatically fall\nback to a workspace search that doesn't use AI or include connected sources. This will be\nindicated by the \"type\" field in the response being \"workspace_search\" instead of\n\"ai_search\".\nDo NOT use search to get information about a Database's integrations, views, or other\ncomponents.\nIf initial results do not contain all the information you need, you can try more specific\nqueries.\nAfter obtaining internal search results, if the user asks for the full contents of a page or\ndatabase, use the \"fetch\" tool. This tool only shows some details like a highlight and the\nURL and title of each search result.\nTo find pages under a Notion database, use this tool and supply the database's URL as the\ndata_source_url parameter. These look like \"collection://f336d0bc-b841-465b-8045-024475c079dd\".\nYou can get this URL by using the \"fetch\" tool to view the database and copying the URL from\nthe <data-source url=\"...\"> block. Keep in mind that Notion-flavored Markdown has this\nconcept of a hierarchy of <database> blocks that contain <data-source> blocks, but users\naren't familiar with the Notion \"Data Source\" terminology or product. Prefer to refer to\nboth of them as \"databases\" in your response to humans to avoid confusion.\nExamples of searches:\n1. Search for information across the workspace:\n{\n\"query\": \"quarterly revenue report\",\n\"query_type\": \"internal\"\n}\n2. Search within a specific page and its children:\n{\n\"query\": \"meeting notes action items\",\n\"query_type\": \"internal\",\n\"page_url\": \"https://www.notion.so/workspace/Team-Hub-1234567890abcdef\"\n}\n3. Search within a database's pages:\n{\n\"query\": \"design review feedback\",\n\"query_type\": \"internal\",\n\"data_source_url\": \"collection://f336d0bc-b841-465b-8045-024475c079dd\"\n}\n4. Search within a specific teamspace:\n{\n\"query\": \"project updates\",\n\"query_type\": \"internal\",\n\"teamspace_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"\n}\n5. Search for users:\n{\n\"query\": \"john@example.com\",\n\"query_type\": \"user\"\n}\n6. Find users by partial name:\n{\n\"query\": \"sarah\",\n\"query_type\": \"user\"\n}\nCommon use cases:\n- \"What does the sales team require from the product team in the next quarter?\"\n- \"Find all meeting notes that mention the new pricing strategy\"\n- \"Which pages discuss the API migration project?\"\n- \"Find all team members with email addresses ending in @design.company.com\"\n- \"What are the latest updates on the mobile app redesign?\"",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 1,
                "description": "Semantic search query over your entire Notion workspace and connected sources\n(Slack, Google Drive, Github, Jira, Microsoft Teams, Sharepoint, OneDrive,\nor Linear). For best results, don't provide more than one question per tool call.\nUse a separate \"search\" tool call for each search you want to perform.\nAlternatively, the query can be a substring or keyword to find users by matching\nagainst their name or email address. For example: \"john\" or \"john@example.com\""
              },
              "query_type": {
                "type": "string",
                "enum": [
                  "internal",
                  "user"
                ],
                "description": "Specify type of the query as either \"internal\" or \"user\". Always include this input if performing\n\"user\" search."
              },
              "data_source_url": {
                "type": "string",
                "description": "Optionally, provide the URL of a Data source to search. This will perform a semantic search over\nthe pages in the Data Source. Note: must be a Data Source, not a Database. <data-source> tags are\npart of the Notion flavored Markdown format returned by tools like fetch. The full spec is\navailable in the create-pages tool description."
              },
              "page_url": {
                "type": "string",
                "description": "Optionally, provide the URL or ID of a page to search within. This will perform a semantic search\nover the content within and under the specified page. Accepts either a full page URL\n(e.g. https://notion.so/workspace/Page-Title-1234567890) or just the page ID (UUIDv4) with or\nwithout dashes."
              },
              "teamspace_id": {
                "type": "string",
                "description": "Optionally, provide the ID of a teamspace to restrict search results to. This will perform a search\nover content within the specified teamspace only. Accepts the teamspace ID (UUIDv4) with or\nwithout dashes."
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Search Notion and connected sources",
            "readOnlyHint": true,
            "openWorldHint": true
          }
        },
        {
          "name": "fetch",
          "description": "Retrieves details about a Notion entity by its URL or ID.\nYou can fetch the following types of entities:\n- Page, i.e. from a <page> block or a <mention-page> mention\n- Database, i.e. from a <database> block or a <mention-database> mention\nUse the \"fetch\" tool when you need to see the details of a Notion entity you already know\nexists and have its URL or ID.\nProvide the Notion entity's URL or ID in the `id` parameter. You must make multiple calls\nto the \"fetch\" tool if you want to fetch multiple entities.\nContent for pages that are returned use the enhanced Markdown format, which is a superset of\nthe standard Markdown syntax. See the full spec in the description of the \"create-pages\"\ntool.\nNotion does not currently have a public concept of Data Sources, and only supports Databases.\nWhen rendering the response from this tool, assume the database only has one data source and\ndisplay the details of the data source as the database, removing any mention of \"data\nsources\" from the result.\nExamples of fetching entities:\n1. Fetch a page by URL:\n{\n\"id\": \"https://www.notion.so/workspace/Product-Requirements-1234567890abcdef\"\n}\n2. Fetch a page by ID (UUIDv4 with dashes):\n{\n\"id\": \"12345678-90ab-cdef-1234-567890abcdef\"\n}\n3. Fetch a page by ID (UUIDv4 without dashes):\n{\n\"id\": \"1234567890abcdef1234567890abcdef\"\n}\n4. Fetch a database:\n{\n\"id\": \"https://www.notion.so/workspace/Projects-Database-abcdef1234567890\"\n}\nCommon use cases:\n- \"What are the product requirements still need to be implemented from this ticket\nhttps://notion.so/page-url?\"\n- \"Show me the details of the project database at this URL\"\n- \"Get the content of page 12345678-90ab-cdef-1234-567890abcdef\"",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID or URL of the Notion page to fetch"
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Fetch Notion entities",
            "readOnlyHint": true,
            "openWorldHint": true
          }
        },
        {
          "name": "create-pages",
          "description": "Creates one or more Notion pages with specified properties and content.\nUse \"create-pages\" when you need to create one or more new pages that don't exist yet.\nAlways include a title property under `properties` in each entry of the `pages` array.\nOtherwise, the page title will appear blank even if the page content is populated. Don't\nduplicate the page title at the top of the page's `content`.\nWhen creating pages under a Notion database, the property names must match the database's\nschema. Use the \"fetch\" tool with a Notion database URL to get the database schema. Or, look\nfor existing pages under the database using the \"search\" tool then use the \"fetch\" tool to see\nthe names of the property keys. One exception is the \"title\" property, which all pages have,\nbut can be named differently in the schema of a database. For convenience, you can use the\ngeneric property name \"title\" in the \"properties\" object, and it will automatically be\nre-mapped to the actual name of the title property in the database schema when creating the\npage.\nAll pages created with a single call to this tool will have the same parent.\nThe parent can be a Notion page or database. If the parent is omitted, the pages will be\ncreated as standalone, workspace-level private pages and the person that created them\ncan organize them as they see fit later.\nExamples of creating pages:\n1. Create a standalone page with a title and content:\n{\n\"pages\": [\n{\n\"properties\": {\"title\":\"Page title\"},\n\"content\": \"# Section 1\nSection 1 content\n# Section 2\nSection 2 content\"\n}\n]\n}\n2. Create a page in a Tasks database with URL {{3}} and properties \"Task Name\" and \"Status\":\n{\n\"parent\": {\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"},\n\"pages\": [\n{\n\"properties\": {\n\"Task Name\": \"Task 123\",\n\"Status\": \"In Progress\",\n},\n},\n],\n}\n3. Create a page with an existing page as a parent:\n{\n\"parent\": {\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"},\n\"pages\": [\n{\n\"properties\": {\"title\": \"Page title\"},\n\"content\": \"# Section 1\nSection 1 content\n# Section 2\nSection 2 content\"\n}\n]\n}\nThe enhanced Markdown format used for page content is a superset of the standard Markdown\nsyntax. Here is the full spec, but please note that Notion does not yet use the Data Source\nterminology, and only supports Databases. Ignore anything related to \"data sources\" and assume\ndatabases can only define one schema for now.\nNotion-flavored Markdown is a variant of standard Markdown with additional features to support all Block and Rich text types.\nUse tabs for indentation.\nUse backslashes to escape characters. For example, * will render as * and not as a bold delimiter.\nBlock types:\nMarkdown blocks use a {color=\"Color\"} attribute list to set a block color.\nText:\nRich text {color=\"Color\"}\nChildren\nHeadings:\n# Rich text {color=\"Color\"}\n## Rich text {color=\"Color\"}\n### Rich text {color=\"Color\"}\n(Headings 4, 5, and 6 are not supported in Notion and will be converted to heading 3.)\nBulleted list:\n- Rich text {color=\"Color\"}\nChildren\nNumbered list:\n1. Rich text {color=\"Color\"}\nChildren\nQuote:\n> Rich text {color=\"Color\"}\nChildren\nTo-do:\n- [ ] Rich text {color=\"Color\"}\nChildren\n- [x] Rich text {color=\"Color\"}\nChildren\nToggle:\n▶ Rich text {color=\"Color\"}\nChildren\nToggle heading 1:\n▶# Rich text {color=\"Color\"}\nChildren\nToggle heading 2:\n▶## Rich text {color=\"Color\"}\nChildren\nToggle heading 3:\n▶### Rich text {color=\"Color\"}\nChildren\nFor toggles and toggle headings, the children must be indented in order for them to be toggleable. If you do not indent the children, they will not be contained within the toggle or toggle heading.\nDivider:\n---\nTable:\n| Rich text | Rich text |\n| --- | --- |\n| Rich text | Rich text |\nEquation:\n$$\nEquation\n$$\nCode:\n```language\nCode\n```\nXML blocks use the \"color\" attribute to set a block color.\nCallout:\n<callout icon?=\"emoji\" color?=\"Color\">\nChildren\n</callout>\nColumns:\n<columns>\n<column>\nChildren\n</column>\n<column>\nChildren\n</column>\n</columns>\nPage:\n<page url=\"{{URL}}\" color?=\"Color\">Title</page>\nSub-pages can be viewed using the \"view\" tool.\nTo create a new sub-page, omit the URL. You can then update the page content and properties with the \"update-page\" tool. Example: <page>New Page</page>\nDatabase:\n<database url=\"{{URL}}\" inline?=\"{true|false}\" color?=\"Color\">Title</database>\nTo create a new database, omit the URL. You can then update the database properties and content with the \"update-database\" tool. Example: <database>New Database</database>\nThe \"inline\" toggles how the database is displayed in the UI. If it is true, the database is fully visible and interactive on the page. If false, the database is displayed as a sub-page.\nThere is no \"Data Source\" block type. Data Sources are always inside a Database, and only Databases can be inserted into a Page.\nAudio:\n<audio source=\"{{URL}}\" color?=\"Color\">Caption</audio>\nFile:\nFile content can be viewed using the \"view\" tool.\n<file source=\"{{URL}}\" color?=\"Color\">Caption</file>\nImage:\nImage content can be viewed using the \"view\" tool.\n<image source=\"{{URL}}\" color?=\"Color\">Caption</image>\nPDF:\nPDF content can be viewed using the \"view\" tool.\n<pdf source=\"{{URL}}\" color?=\"Color\">Caption</pdf>\nVideo:\n<video source=\"{{URL}}\" color?=\"Color\">Caption</video>\nTable of contents:\n<table_of_contents color?=\"Color\"/>\nSynced block:\nThe original source for a synced block.\nWhen creating a new synced block, do not provide the URL. After inserting the synced block into a page, the URL will be provided.\n<synced_block url=?\"{{URL}}\">\nChildren\n</synced_block>\nSynced block reference:\nA reference to a synced block.\nThe synced block must already exist and url must be provided.\nYou can directly update the children of the synced block reference and it will update both the original synced block and the synced block reference.\n<synced_block_reference url=\"{{URL}}\">\nChildren\n</synced_block_reference>\nTranscription:\n<transcription>\nRich text (transcript title)\n<summary>\nAI-generated summary of the notes + transcript\n</summary>\n<notes>\nUser notes\n</notes>\n<transcript>\nTranscript of the audio (cannot be edited)\n</transcript>\n</transcription>\nNote: The <transcript> tag contains a raw transcript and cannot be edited.\nUnknown (a block type that is not supported in the API yet):\n<unknown url=\"{{URL}}\" alt=\"Alt\"/>\nRich text types:\nBold:\n**Rich text**\nItalic:\n*Rich text*\nStrikethrough:\n~~Rich text~~\nUnderline:\n<span underline=\"true\">Rich text</span>\nStrikethrough:\n~~Rich text~~\nInline code:\n`Code`\nLink:\n[Link text](URL)\nCitation:\n[^URL]\nTo create a citation, you can either reference a compressed URL like [^{{1}}], or a full URL like [^https://example.com].\nColors:\n<span color?=\"Color\">Rich text</span>\nInline math:\n$Equation$ or $`Equation`$ if you want to use markdown delimiters within the equation.\nThere must be whitespace before the starting $ symbol and after the ending $ symbol. There must not be whitespace right after the starting $ symbol or before the ending $ symbol.\nInline line breaks within rich text:\n<br>\nMentions:\n,\nUser:\n<mention-user url=\"{{URL}}\">User name</mention-user>\nThe URL must always be provided, and refer to an existing User.\nProviding the user name is optional. In the UI, the name will always be displayed.\nPage:\n<mention-page url=\"{{URL}}\">Page title</mention-page>\nThe URL must always be provided, and refer to an existing Page.\nProviding the page title is optional. In the UI, the title will always be displayed.\nMentioned pages can be viewed using the \"view\" tool.\nDatabase:\n<mention-database url=\"{{URL}}\">Database name</mention-database>\nThe URL must always be provided, and refer to an existing Database.\nProviding the database name is optional. In the UI, the name will always be displayed.\nMentioned databases can be viewed using the \"view\" tool.\nDate:\n<mention-date start=\"YYYY-MM-DD\" end=\"YYYY-MM-DD\"/>\nDatetime:\n<mention-date start=\"YYYY-MM-DDThh:mm:ssZ\" end=\"YYYY-MM-DDThh:mm:ssZ\"/>\nCustom emoji:\n:emoji_name:\nCustom emoji are rendered as the emoji name surrounded by colons.\nColors:\nOnly use colors in markdown blocks when the user has explicitly asked for them.\nText colors (renders as colored text a transparent background):\ngray,brown,orange,yellow,green,blue,purple,pink,red\nBackground colors (renders as colored background with contrasting text):\ngray_bg,brown_bg,orange_bg,yellow_bg,green_bg,blue_bg,purple_bg,pink_bg,red_bg",
          "inputSchema": {
            "type": "object",
            "properties": {
              "pages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "properties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": [
                          "string",
                          "number",
                          "null"
                        ]
                      },
                      "description": "The properties of the new page, which is a JSON map of property names to SQLite values.\nFor pages in a database, use the SQLite schema definition shown in <database>.\nFor pages outside of a database, the only allowed property is \"title\", which is the title of the page and is automatically shown at the top of the page as a large heading."
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the new page, using Notion Markdown."
                    }
                  },
                  "additionalProperties": false
                },
                "maxItems": 100,
                "description": "The pages to create."
              },
              "parent": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "page_id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "page_id"
                        ]
                      }
                    },
                    "required": [
                      "page_id"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "database_id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "database_id"
                        ]
                      }
                    },
                    "required": [
                      "database_id"
                    ],
                    "additionalProperties": false
                  }
                ],
                "description": "The parent under which the new pages will be created. This can be a page or a database. If omitted, the new pages will be created as private pages at the workspace level."
              }
            },
            "required": [
              "pages"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Create pages in Markdown",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "update-page",
          "description": "Update a Notion page's properties or content.\nNotion page properties are a JSON map of property names to SQLite values.\nFor pages in a database, use the SQLite schema definition shown in <database>.\nFor pages outside of a database, the only allowed property is \"title\", which is the title of\nthe page and is automatically shown at the top of the page as a large heading.\nNotion page content is a string in Notion-flavored Markdown format. See the \"create-pages\"\ntool description for the full enhanced Markdown spec.\nBefore updating a page's content with this tool, use the \"fetch\" tool first to get the\nexisting content to find out the Markdown snippets to use in the \"replace_content_range\" or\n\"insert_content_after\" commands.\nExamples:\n(1) Update page properties:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"update_properties\",\n\"properties\": {\n\"title\": \"New Page Title\",\n\"status\": \"In Progress\",\n\"checkbox\": \"__YES__\"\n}\n}\nUse the \"fetch\" tool to find the existing properties of the page to make sure your changes\ninclude all property names and values, and are spelled correctly, for pages under a database.\nA title property is required for pages in a database but may not be named \"title\" so be sure\nto use the correct property name. For pages outside of a database, the only allowed property\nis \"title\" and it will always be named \"title\".\n(2) Replace the entire content of a page:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"replace_content\",\n\"new_str\": \"# New Section\nUpdated content goes here\"\n}\n(3) Replace specific content in a page:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"replace_content_range\",\n\"selection_with_ellipsis\": \"# Old Section...end of section\",\n\"new_str\": \"# New Section\nUpdated content goes here\"\n}\nRemember you should not include the entire string to replace, only the first ~10 characters,\nan ellipsis, and the last ~10 characters.\nHowever, the start and end of the range must have enough characters to be able to uniquely\nidentify the range in the page; do not use an ambiguous or repeated selection.\nIf you get errors, try using a longer or different selection.\n(4) Insert content after specific text:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"insert_content_after\",\n\"selection_with_ellipsis\": \"## Previous section...\",\n\"new_str\": \"\n## New Section\nContent to insert goes here\"\n}",
          "inputSchema": {
            "type": "object",
            "properties": {
              "data": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "page_id": {
                        "type": "string",
                        "description": "The ID of the page to update, with or without dashes."
                      }
                    },
                    "required": [
                      "page_id"
                    ]
                  },
                  {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "command": {
                            "type": "string",
                            "enum": [
                              "update_properties"
                            ]
                          },
                          "properties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "A JSON object that updates the page's properties.\nFor pages in a database, use the SQLite schema definition shown in <database>.\nFor pages outside of a database, the only allowed property is \"title\", which is the title of the page in inline markdown format.\nUse null to remove a property's value."
                          }
                        },
                        "required": [
                          "command",
                          "properties"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "command": {
                            "type": "string",
                            "enum": [
                              "replace_content"
                            ]
                          },
                          "new_str": {
                            "type": "string",
                            "description": "The new string to replace all content with."
                          }
                        },
                        "required": [
                          "command",
                          "new_str"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "command": {
                            "type": "string",
                            "enum": [
                              "replace_content_range"
                            ]
                          },
                          "selection_with_ellipsis": {
                            "type": "string",
                            "description": "Unique start and end snippet of the string to replace in the page content, including whitespace.\nDO NOT provide the entire string to replace. Instead, provide up to the first ~10 characters of the string to replace, an ellipsis, and then up to the last ~10 characters of the string to replace.\nMake sure you provide enough of the start and end snippet to uniquely identify the string to replace.\nFor example, to replace an entire section, use \"old_start_and_end_snippet\":\"# Section heading...last paragraph.\""
                          },
                          "new_str": {
                            "type": "string",
                            "description": "The new string to replace the old string with."
                          }
                        },
                        "required": [
                          "command",
                          "selection_with_ellipsis",
                          "new_str"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "command": {
                            "type": "string",
                            "enum": [
                              "insert_content_after"
                            ]
                          },
                          "selection_with_ellipsis": {
                            "type": "string",
                            "description": "Unique start and end snippet of the string to match in the page content, including whitespace.\nDO NOT provide the entire string to match. Instead, provide up to the first ~10 characters of the string to match, an ellipsis, and then up to the last ~10 characters of the string to match.\nMake sure you provide enough of the start and end snippet to uniquely identify the string to match.\nFor example, to match an entire section, use \"selection_with_ellipsis\":\"# Section heading...last paragraph.\""
                          },
                          "new_str": {
                            "type": "string",
                            "description": "The new content to insert."
                          }
                        },
                        "required": [
                          "command",
                          "selection_with_ellipsis",
                          "new_str"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "description": "The data required for updating a page"
              }
            },
            "required": [
              "data"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Update Notion page",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "move-pages",
          "description": "Move one or more Notion pages or databases to a new parent.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page_or_database_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "maxItems": 100,
                "description": "An array of up to 100 page or database IDs to move. IDs are v4 UUIDs and can be supplied with or without dashes (e.g. extracted from a <page> or <database> URL given by the \"search\" or \"view\" tool). Data Sources under Databases can't be moved individually."
              },
              "new_parent": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "page_id": {
                        "type": "string",
                        "description": "The ID of the parent page (with or without dashes), for example, 195de9221179449fab8075a27c979105"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "page_id"
                        ]
                      }
                    },
                    "required": [
                      "page_id"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "database_id": {
                        "type": "string",
                        "description": "The ID of the parent database (with or without dashes), for example, 195de9221179449fab8075a27c979105"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "database_id"
                        ]
                      }
                    },
                    "required": [
                      "database_id"
                    ],
                    "additionalProperties": false
                  }
                ],
                "description": "The new parent under which the pages will be moved. This can be a page or a database."
              }
            },
            "required": [
              "page_or_database_ids",
              "new_parent"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Move Notion pages",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": true,
            "openWorldHint": false
          }
        },
        {
          "name": "duplicate-page",
          "description": "Duplicate a Notion page. The page must be within the current workspace, and you must have permission to access it. The duplication completes asynchronously, so do not rely on the new page identified by the returned ID or URL to be populated immediately. Let the user know that the duplication is in progress and that they can check back later using the 'fetch' tool or by clicking the returned URL and viewing it in the Notion app.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page_id": {
                "type": "string",
                "description": "The ID of the page to duplicate. This is a v4 UUID, with or without dashes, and can be parsed from a Notion page URL."
              }
            },
            "required": [
              "page_id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Duplicate Notion page",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "create-database",
          "description": "Creates a new Notion database with the specified properties.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "description": {
                          "anyOf": [
                            {
                              "type": "string",
                              "maxLength": 280
                            },
                            {
                              "type": "null"
                            }
                          ],
                          "description": "The description of the property."
                        }
                      }
                    },
                    {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "number"
                              ]
                            },
                            "number": {
                              "type": "object",
                              "properties": {
                                "format": {
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 18
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "number"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "formula"
                              ]
                            },
                            "formula": {
                              "type": "object",
                              "properties": {
                                "expression": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "formula"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "select"
                              ]
                            },
                            "select": {
                              "type": "object",
                              "properties": {
                                "options": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "color": {
                                        "type": "string",
                                        "enum": [
                                          "default",
                                          "gray",
                                          "brown",
                                          "orange",
                                          "yellow",
                                          "green",
                                          "blue",
                                          "purple",
                                          "pink",
                                          "red"
                                        ]
                                      },
                                      "description": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "maxItems": 100
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "select"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "multi_select"
                              ]
                            },
                            "multi_select": {
                              "type": "object",
                              "properties": {
                                "options": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "color": {
                                        "type": "string",
                                        "enum": [
                                          "default",
                                          "gray",
                                          "brown",
                                          "orange",
                                          "yellow",
                                          "green",
                                          "blue",
                                          "purple",
                                          "pink",
                                          "red"
                                        ]
                                      },
                                      "description": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "maxItems": 100
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "multi_select"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "status"
                              ]
                            },
                            "status": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "status"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "relation"
                              ]
                            },
                            "relation": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "database_id": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "database_id"
                                  ]
                                },
                                {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "single_property": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": false
                                        }
                                      },
                                      "required": [
                                        "single_property"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "dual_property": {
                                          "type": "object",
                                          "properties": {
                                            "synced_property_id": {
                                              "type": "string"
                                            },
                                            "synced_property_name": {
                                              "type": "string"
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "required": [
                                        "dual_property"
                                      ],
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "relation"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "rollup"
                              ]
                            },
                            "rollup": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "function": {
                                      "type": "string",
                                      "minLength": 3,
                                      "maxLength": 17
                                    }
                                  },
                                  "required": [
                                    "function"
                                  ]
                                },
                                {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "relation_property_name": {
                                          "type": "string"
                                        },
                                        "rollup_property_name": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "relation_property_name",
                                        "rollup_property_name"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "relation_property_id": {
                                          "type": "string"
                                        },
                                        "rollup_property_name": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "relation_property_id",
                                        "rollup_property_name"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "relation_property_name": {
                                          "type": "string"
                                        },
                                        "rollup_property_id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "relation_property_name",
                                        "rollup_property_id"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "relation_property_id": {
                                          "type": "string"
                                        },
                                        "rollup_property_id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "relation_property_id",
                                        "rollup_property_id"
                                      ],
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "rollup"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "unique_id"
                              ]
                            },
                            "unique_id": {
                              "type": "object",
                              "properties": {
                                "prefix": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "unique_id"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "title"
                              ]
                            },
                            "title": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "rich_text"
                              ]
                            },
                            "rich_text": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "rich_text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "url"
                              ]
                            },
                            "url": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "people"
                              ]
                            },
                            "people": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "people"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "files"
                              ]
                            },
                            "files": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "files"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "email"
                              ]
                            },
                            "email": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "email"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "phone_number"
                              ]
                            },
                            "phone_number": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "phone_number"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "date"
                              ]
                            },
                            "date": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "date"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "checkbox"
                              ]
                            },
                            "checkbox": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "checkbox"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "created_by"
                              ]
                            },
                            "created_by": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "created_by"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "created_time"
                              ]
                            },
                            "created_time": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "created_time"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "last_edited_by"
                              ]
                            },
                            "last_edited_by": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "last_edited_by"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "last_edited_time"
                              ]
                            },
                            "last_edited_time": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "last_edited_time"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  ]
                },
                "description": "The property schema of the new database. Must at least have a title property."
              },
              "parent": {
                "type": "object",
                "properties": {
                  "page_id": {
                    "type": "string",
                    "description": "The ID of the parent page (with or without dashes), for example, 195de9221179449fab8075a27c979105"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "page_id"
                    ]
                  }
                },
                "required": [
                  "page_id"
                ],
                "additionalProperties": false,
                "description": "The parent under which to create the new database. If omitted, the database will be created as a private page at the workspace level."
              },
              "title": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as bold."
                            },
                            "italic": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as italic."
                            },
                            "strikethrough": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with a strikethrough."
                            },
                            "underline": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with an underline."
                            },
                            "code": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as code."
                            },
                            "color": {
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 18
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            },
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "maxLength": 2000,
                                  "description": "The actual text content of the text."
                                },
                                "link": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the link."
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "description": "An object with information about any inline link in this text, if included."
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false,
                              "description": "If a rich text object's type value is `text`, then the corresponding text field contains an object including the text content and any inline link."
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "mention"
                              ]
                            },
                            "mention": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    },
                                    "user": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "object": {
                                              "type": "string",
                                              "enum": [
                                                "user"
                                              ],
                                              "description": "The user object type name."
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The name of the user."
                                                },
                                                "object": {
                                                  "type": "string",
                                                  "enum": [
                                                    "user"
                                                  ],
                                                  "description": "The user object type name."
                                                },
                                                "avatar_url": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The avatar URL of the user."
                                                }
                                              },
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "person"
                                                      ]
                                                    },
                                                    "person": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "description": "The email of the person."
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "person"
                                                  ],
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "bot"
                                                      ]
                                                    },
                                                    "bot": {
                                                      "type": "object",
                                                      "properties": {
                                                        "owner": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "user": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "email": {
                                                                          "type": "string",
                                                                          "description": "The email of the person."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "email"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    },
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "id": {
                                                                          "type": "string"
                                                                        },
                                                                        "object": {
                                                                          "type": "string",
                                                                          "enum": [
                                                                            "user"
                                                                          ],
                                                                          "description": "The user object type name."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "id"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    }
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `user`. This means the bot is for a public integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "user"
                                                              ],
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "workspace": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "true"
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `workspace`. This means the bot is for an internal integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "workspace"
                                                              ],
                                                              "additionalProperties": false
                                                            }
                                                          ]
                                                        },
                                                        "workspace_name": {
                                                          "type": [
                                                            "string",
                                                            "null"
                                                          ],
                                                          "description": "The name of the bot's workspace."
                                                        },
                                                        "workspace_limits": {
                                                          "type": "object",
                                                          "properties": {
                                                            "max_file_upload_size_in_bytes": {
                                                              "type": "integer",
                                                              "description": "The maximum allowable size of a file upload, in bytes"
                                                            }
                                                          },
                                                          "required": [
                                                            "max_file_upload_size_in_bytes"
                                                          ],
                                                          "additionalProperties": false
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "bot"
                                                  ],
                                                  "additionalProperties": false
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "description": "Details of the user mention."
                                    }
                                  },
                                  "required": [
                                    "user"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "date"
                                      ]
                                    },
                                    "date": {
                                      "type": "object",
                                      "properties": {
                                        "start": {
                                          "type": "string",
                                          "format": "date",
                                          "description": "The start date of the date object."
                                        },
                                        "end": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "date"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The end date of the date object, if any."
                                        },
                                        "time_zone": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "minLength": 2,
                                              "maxLength": 32
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The time zone of the date object, if any. E.g. America/Los_Angeles, Europe/London, etc."
                                        }
                                      },
                                      "required": [
                                        "start"
                                      ],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [
                                    "date"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "page"
                                      ]
                                    },
                                    "page": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the page mention."
                                    }
                                  },
                                  "required": [
                                    "page"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "database"
                                      ]
                                    },
                                    "database": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the database mention."
                                    }
                                  },
                                  "required": [
                                    "database"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "template_mention"
                                      ]
                                    },
                                    "template_mention": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_date"
                                              ]
                                            },
                                            "template_mention_date": {
                                              "type": "string",
                                              "enum": [
                                                "today",
                                                "now"
                                              ],
                                              "description": "The date of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_date"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_user"
                                              ]
                                            },
                                            "template_mention_user": {
                                              "type": "string",
                                              "enum": [
                                                "me"
                                              ],
                                              "description": "The user of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_user"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "template_mention"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_emoji"
                                      ]
                                    },
                                    "custom_emoji": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the custom emoji."
                                        },
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the custom emoji."
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the custom emoji mention."
                                    }
                                  },
                                  "required": [
                                    "custom_emoji"
                                  ],
                                  "additionalProperties": false
                                }
                              ],
                              "description": "Mention objects represent an inline mention of a database, date, link preview mention, page, template mention, or user. A mention is created in the Notion UI when a user types `@` followed by the name of the reference."
                            }
                          },
                          "required": [
                            "mention"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "equation"
                              ]
                            },
                            "equation": {
                              "type": "object",
                              "properties": {
                                "expression": {
                                  "type": "string",
                                  "description": "A KaTeX compatible string."
                                }
                              },
                              "required": [
                                "expression"
                              ],
                              "additionalProperties": false,
                              "description": "Notion supports inline LaTeX equations as rich text objects with a type value of `equation`."
                            }
                          },
                          "required": [
                            "equation"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  ]
                },
                "maxItems": 100,
                "description": "The title of the new database, as a rich text object."
              },
              "description": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as bold."
                            },
                            "italic": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as italic."
                            },
                            "strikethrough": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with a strikethrough."
                            },
                            "underline": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with an underline."
                            },
                            "code": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as code."
                            },
                            "color": {
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 18
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            },
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "maxLength": 2000,
                                  "description": "The actual text content of the text."
                                },
                                "link": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the link."
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "description": "An object with information about any inline link in this text, if included."
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false,
                              "description": "If a rich text object's type value is `text`, then the corresponding text field contains an object including the text content and any inline link."
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "mention"
                              ]
                            },
                            "mention": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    },
                                    "user": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "object": {
                                              "type": "string",
                                              "enum": [
                                                "user"
                                              ],
                                              "description": "The user object type name."
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The name of the user."
                                                },
                                                "object": {
                                                  "type": "string",
                                                  "enum": [
                                                    "user"
                                                  ],
                                                  "description": "The user object type name."
                                                },
                                                "avatar_url": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The avatar URL of the user."
                                                }
                                              },
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "person"
                                                      ]
                                                    },
                                                    "person": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "description": "The email of the person."
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "person"
                                                  ],
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "bot"
                                                      ]
                                                    },
                                                    "bot": {
                                                      "type": "object",
                                                      "properties": {
                                                        "owner": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "user": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "email": {
                                                                          "type": "string",
                                                                          "description": "The email of the person."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "email"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    },
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "id": {
                                                                          "type": "string"
                                                                        },
                                                                        "object": {
                                                                          "type": "string",
                                                                          "enum": [
                                                                            "user"
                                                                          ],
                                                                          "description": "The user object type name."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "id"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    }
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `user`. This means the bot is for a public integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "user"
                                                              ],
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "workspace": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "true"
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `workspace`. This means the bot is for an internal integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "workspace"
                                                              ],
                                                              "additionalProperties": false
                                                            }
                                                          ]
                                                        },
                                                        "workspace_name": {
                                                          "type": [
                                                            "string",
                                                            "null"
                                                          ],
                                                          "description": "The name of the bot's workspace."
                                                        },
                                                        "workspace_limits": {
                                                          "type": "object",
                                                          "properties": {
                                                            "max_file_upload_size_in_bytes": {
                                                              "type": "integer",
                                                              "description": "The maximum allowable size of a file upload, in bytes"
                                                            }
                                                          },
                                                          "required": [
                                                            "max_file_upload_size_in_bytes"
                                                          ],
                                                          "additionalProperties": false
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "bot"
                                                  ],
                                                  "additionalProperties": false
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "description": "Details of the user mention."
                                    }
                                  },
                                  "required": [
                                    "user"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "date"
                                      ]
                                    },
                                    "date": {
                                      "type": "object",
                                      "properties": {
                                        "start": {
                                          "type": "string",
                                          "format": "date",
                                          "description": "The start date of the date object."
                                        },
                                        "end": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "date"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The end date of the date object, if any."
                                        },
                                        "time_zone": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "minLength": 2,
                                              "maxLength": 32
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The time zone of the date object, if any. E.g. America/Los_Angeles, Europe/London, etc."
                                        }
                                      },
                                      "required": [
                                        "start"
                                      ],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [
                                    "date"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "page"
                                      ]
                                    },
                                    "page": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the page mention."
                                    }
                                  },
                                  "required": [
                                    "page"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "database"
                                      ]
                                    },
                                    "database": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the database mention."
                                    }
                                  },
                                  "required": [
                                    "database"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "template_mention"
                                      ]
                                    },
                                    "template_mention": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_date"
                                              ]
                                            },
                                            "template_mention_date": {
                                              "type": "string",
                                              "enum": [
                                                "today",
                                                "now"
                                              ],
                                              "description": "The date of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_date"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_user"
                                              ]
                                            },
                                            "template_mention_user": {
                                              "type": "string",
                                              "enum": [
                                                "me"
                                              ],
                                              "description": "The user of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_user"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "template_mention"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_emoji"
                                      ]
                                    },
                                    "custom_emoji": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the custom emoji."
                                        },
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the custom emoji."
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the custom emoji mention."
                                    }
                                  },
                                  "required": [
                                    "custom_emoji"
                                  ],
                                  "additionalProperties": false
                                }
                              ],
                              "description": "Mention objects represent an inline mention of a database, date, link preview mention, page, template mention, or user. A mention is created in the Notion UI when a user types `@` followed by the name of the reference."
                            }
                          },
                          "required": [
                            "mention"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "equation"
                              ]
                            },
                            "equation": {
                              "type": "object",
                              "properties": {
                                "expression": {
                                  "type": "string",
                                  "description": "A KaTeX compatible string."
                                }
                              },
                              "required": [
                                "expression"
                              ],
                              "additionalProperties": false,
                              "description": "Notion supports inline LaTeX equations as rich text objects with a type value of `equation`."
                            }
                          },
                          "required": [
                            "equation"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  ]
                },
                "maxItems": 100,
                "description": "The description of the new database, as a rich text object."
              }
            },
            "required": [
              "properties"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Create Notion database",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "update-database",
          "description": "Update a Notion database's properties, name, description, or other attributes.\nThe tool returns a rendered Markdown string showing the updated database structure,\nincluding its properties, data sources, and schema information.\nDatabase properties define the columns/fields that pages in the database can have.\nEach property has a type (text, number, select, etc.) and configuration options.\nExamples:\n(1) Update database title and description:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"title\": [{\"type\": \"text\", \"text\": {\"content\": \"Project Tracker 2024\"}}],\n\"description\": [{\"type\": \"text\", \"text\": {\"content\": \"Track all projects and deliverables\"}}]\n}\n(2) Add new properties to a database:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"Priority\": {\n\"select\": {\n\"options\": [\n{\"name\": \"High\", \"color\": \"red\"},\n{\"name\": \"Medium\", \"color\": \"yellow\"},\n{\"name\": \"Low\", \"color\": \"green\"}\n]\n}\n},\n\"Due Date\": {\"date\": {}},\n\"Assigned To\": {\"people\": {}}\n}\n}\n(3) Rename an existing property (use the property ID or current name):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"Status\": {\"name\": \"Project Status\"}\n}\n}\n(4) Remove a property (set to null):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"Old Property\": null\n}\n}\n(5) Change display mode from inline to full page:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"is_inline\": false\n}\n(6) Move database to trash (WARNING: cannot be undone without going to the Notion app UI so\nexplicitly confirm with the user that they really want to do this):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"in_trash\": true\n}\nCommon property types:\n- title: The main property (required, cannot be deleted)\n- rich_text: Multi-line text\n- number: Numeric values with optional formatting\n- select: Single choice from options\n- multi_select: Multiple choices from options\n- date: Date with optional time\n- people: User references\n- checkbox: Boolean values\n- url: Web links\n- email: Email addresses\n- phone_number: Phone numbers\n- formula: Calculated values based on other properties\n- relation: Links to pages in another database\n- rollup: Aggregated values from related pages\nNotes:\n- You cannot delete or create new title properties\n- A database can only have one unique_id property\n- Synced databases cannot be updated\n- Use the \"fetch\" tool first to see the current database schema",
          "inputSchema": {
            "type": "object",
            "properties": {
              "database_id": {
                "type": "string",
                "description": "The ID of the database to update. This is a UUID v4, with or without dashes, and can be parsed from a database URL."
              },
              "title": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as bold."
                            },
                            "italic": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as italic."
                            },
                            "strikethrough": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with a strikethrough."
                            },
                            "underline": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with an underline."
                            },
                            "code": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as code."
                            },
                            "color": {
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 18
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            },
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "maxLength": 2000,
                                  "description": "The actual text content of the text."
                                },
                                "link": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the link."
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "description": "An object with information about any inline link in this text, if included."
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false,
                              "description": "If a rich text object's type value is `text`, then the corresponding text field contains an object including the text content and any inline link."
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "mention"
                              ]
                            },
                            "mention": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    },
                                    "user": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "object": {
                                              "type": "string",
                                              "enum": [
                                                "user"
                                              ],
                                              "description": "The user object type name."
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The name of the user."
                                                },
                                                "object": {
                                                  "type": "string",
                                                  "enum": [
                                                    "user"
                                                  ],
                                                  "description": "The user object type name."
                                                },
                                                "avatar_url": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The avatar URL of the user."
                                                }
                                              },
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "person"
                                                      ]
                                                    },
                                                    "person": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "description": "The email of the person."
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "person"
                                                  ],
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "bot"
                                                      ]
                                                    },
                                                    "bot": {
                                                      "type": "object",
                                                      "properties": {
                                                        "owner": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "user": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "email": {
                                                                          "type": "string",
                                                                          "description": "The email of the person."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "email"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    },
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "id": {
                                                                          "type": "string"
                                                                        },
                                                                        "object": {
                                                                          "type": "string",
                                                                          "enum": [
                                                                            "user"
                                                                          ],
                                                                          "description": "The user object type name."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "id"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    }
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `user`. This means the bot is for a public integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "user"
                                                              ],
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "workspace": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "true"
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `workspace`. This means the bot is for an internal integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "workspace"
                                                              ],
                                                              "additionalProperties": false
                                                            }
                                                          ]
                                                        },
                                                        "workspace_name": {
                                                          "type": [
                                                            "string",
                                                            "null"
                                                          ],
                                                          "description": "The name of the bot's workspace."
                                                        },
                                                        "workspace_limits": {
                                                          "type": "object",
                                                          "properties": {
                                                            "max_file_upload_size_in_bytes": {
                                                              "type": "integer",
                                                              "description": "The maximum allowable size of a file upload, in bytes"
                                                            }
                                                          },
                                                          "required": [
                                                            "max_file_upload_size_in_bytes"
                                                          ],
                                                          "additionalProperties": false
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "bot"
                                                  ],
                                                  "additionalProperties": false
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "description": "Details of the user mention."
                                    }
                                  },
                                  "required": [
                                    "user"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "date"
                                      ]
                                    },
                                    "date": {
                                      "type": "object",
                                      "properties": {
                                        "start": {
                                          "type": "string",
                                          "format": "date",
                                          "description": "The start date of the date object."
                                        },
                                        "end": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "date"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The end date of the date object, if any."
                                        },
                                        "time_zone": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "minLength": 2,
                                              "maxLength": 32
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The time zone of the date object, if any. E.g. America/Los_Angeles, Europe/London, etc."
                                        }
                                      },
                                      "required": [
                                        "start"
                                      ],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [
                                    "date"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "page"
                                      ]
                                    },
                                    "page": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the page mention."
                                    }
                                  },
                                  "required": [
                                    "page"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "database"
                                      ]
                                    },
                                    "database": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the database mention."
                                    }
                                  },
                                  "required": [
                                    "database"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "template_mention"
                                      ]
                                    },
                                    "template_mention": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_date"
                                              ]
                                            },
                                            "template_mention_date": {
                                              "type": "string",
                                              "enum": [
                                                "today",
                                                "now"
                                              ],
                                              "description": "The date of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_date"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_user"
                                              ]
                                            },
                                            "template_mention_user": {
                                              "type": "string",
                                              "enum": [
                                                "me"
                                              ],
                                              "description": "The user of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_user"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "template_mention"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_emoji"
                                      ]
                                    },
                                    "custom_emoji": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the custom emoji."
                                        },
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the custom emoji."
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the custom emoji mention."
                                    }
                                  },
                                  "required": [
                                    "custom_emoji"
                                  ],
                                  "additionalProperties": false
                                }
                              ],
                              "description": "Mention objects represent an inline mention of a database, date, link preview mention, page, template mention, or user. A mention is created in the Notion UI when a user types `@` followed by the name of the reference."
                            }
                          },
                          "required": [
                            "mention"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "equation"
                              ]
                            },
                            "equation": {
                              "type": "object",
                              "properties": {
                                "expression": {
                                  "type": "string",
                                  "description": "A KaTeX compatible string."
                                }
                              },
                              "required": [
                                "expression"
                              ],
                              "additionalProperties": false,
                              "description": "Notion supports inline LaTeX equations as rich text objects with a type value of `equation`."
                            }
                          },
                          "required": [
                            "equation"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  ]
                },
                "maxItems": 100,
                "description": "The new title of the database, as a rich text object, if you want to update it."
              },
              "description": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as bold."
                            },
                            "italic": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as italic."
                            },
                            "strikethrough": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with a strikethrough."
                            },
                            "underline": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with an underline."
                            },
                            "code": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as code."
                            },
                            "color": {
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 18
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            },
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "maxLength": 2000,
                                  "description": "The actual text content of the text."
                                },
                                "link": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the link."
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "description": "An object with information about any inline link in this text, if included."
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false,
                              "description": "If a rich text object's type value is `text`, then the corresponding text field contains an object including the text content and any inline link."
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "mention"
                              ]
                            },
                            "mention": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    },
                                    "user": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "object": {
                                              "type": "string",
                                              "enum": [
                                                "user"
                                              ],
                                              "description": "The user object type name."
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The name of the user."
                                                },
                                                "object": {
                                                  "type": "string",
                                                  "enum": [
                                                    "user"
                                                  ],
                                                  "description": "The user object type name."
                                                },
                                                "avatar_url": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The avatar URL of the user."
                                                }
                                              },
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "person"
                                                      ]
                                                    },
                                                    "person": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "description": "The email of the person."
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "person"
                                                  ],
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "bot"
                                                      ]
                                                    },
                                                    "bot": {
                                                      "type": "object",
                                                      "properties": {
                                                        "owner": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "user": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "email": {
                                                                          "type": "string",
                                                                          "description": "The email of the person."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "email"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    },
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "id": {
                                                                          "type": "string"
                                                                        },
                                                                        "object": {
                                                                          "type": "string",
                                                                          "enum": [
                                                                            "user"
                                                                          ],
                                                                          "description": "The user object type name."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "id"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    }
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `user`. This means the bot is for a public integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "user"
                                                              ],
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "workspace": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "true"
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `workspace`. This means the bot is for an internal integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "workspace"
                                                              ],
                                                              "additionalProperties": false
                                                            }
                                                          ]
                                                        },
                                                        "workspace_name": {
                                                          "type": [
                                                            "string",
                                                            "null"
                                                          ],
                                                          "description": "The name of the bot's workspace."
                                                        },
                                                        "workspace_limits": {
                                                          "type": "object",
                                                          "properties": {
                                                            "max_file_upload_size_in_bytes": {
                                                              "type": "integer",
                                                              "description": "The maximum allowable size of a file upload, in bytes"
                                                            }
                                                          },
                                                          "required": [
                                                            "max_file_upload_size_in_bytes"
                                                          ],
                                                          "additionalProperties": false
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "bot"
                                                  ],
                                                  "additionalProperties": false
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "description": "Details of the user mention."
                                    }
                                  },
                                  "required": [
                                    "user"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "date"
                                      ]
                                    },
                                    "date": {
                                      "type": "object",
                                      "properties": {
                                        "start": {
                                          "type": "string",
                                          "format": "date",
                                          "description": "The start date of the date object."
                                        },
                                        "end": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "date"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The end date of the date object, if any."
                                        },
                                        "time_zone": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "minLength": 2,
                                              "maxLength": 32
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The time zone of the date object, if any. E.g. America/Los_Angeles, Europe/London, etc."
                                        }
                                      },
                                      "required": [
                                        "start"
                                      ],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [
                                    "date"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "page"
                                      ]
                                    },
                                    "page": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the page mention."
                                    }
                                  },
                                  "required": [
                                    "page"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "database"
                                      ]
                                    },
                                    "database": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the database mention."
                                    }
                                  },
                                  "required": [
                                    "database"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "template_mention"
                                      ]
                                    },
                                    "template_mention": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_date"
                                              ]
                                            },
                                            "template_mention_date": {
                                              "type": "string",
                                              "enum": [
                                                "today",
                                                "now"
                                              ],
                                              "description": "The date of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_date"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_user"
                                              ]
                                            },
                                            "template_mention_user": {
                                              "type": "string",
                                              "enum": [
                                                "me"
                                              ],
                                              "description": "The user of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_user"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "template_mention"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_emoji"
                                      ]
                                    },
                                    "custom_emoji": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the custom emoji."
                                        },
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the custom emoji."
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the custom emoji mention."
                                    }
                                  },
                                  "required": [
                                    "custom_emoji"
                                  ],
                                  "additionalProperties": false
                                }
                              ],
                              "description": "Mention objects represent an inline mention of a database, date, link preview mention, page, template mention, or user. A mention is created in the Notion UI when a user types `@` followed by the name of the reference."
                            }
                          },
                          "required": [
                            "mention"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "equation"
                              ]
                            },
                            "equation": {
                              "type": "object",
                              "properties": {
                                "expression": {
                                  "type": "string",
                                  "description": "A KaTeX compatible string."
                                }
                              },
                              "required": [
                                "expression"
                              ],
                              "additionalProperties": false,
                              "description": "Notion supports inline LaTeX equations as rich text objects with a type value of `equation`."
                            }
                          },
                          "required": [
                            "equation"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  ]
                },
                "maxItems": 100,
                "description": "The new description of the database, as a rich text object, if you want to update it."
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the property."
                            },
                            "description": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "maxLength": 280
                                },
                                {
                                  "type": "null"
                                }
                              ],
                              "description": "The description of the property."
                            }
                          }
                        },
                        {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "number"
                                  ]
                                },
                                "number": {
                                  "type": "object",
                                  "properties": {
                                    "format": {
                                      "type": "string",
                                      "minLength": 3,
                                      "maxLength": 18
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "number"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "formula"
                                  ]
                                },
                                "formula": {
                                  "type": "object",
                                  "properties": {
                                    "expression": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "formula"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "select"
                                  ]
                                },
                                "select": {
                                  "type": "object",
                                  "properties": {
                                    "options": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "color": {
                                            "type": "string",
                                            "enum": [
                                              "default",
                                              "gray",
                                              "brown",
                                              "orange",
                                              "yellow",
                                              "green",
                                              "blue",
                                              "purple",
                                              "pink",
                                              "red"
                                            ]
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ],
                                        "additionalProperties": false
                                      },
                                      "maxItems": 100
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "select"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "multi_select"
                                  ]
                                },
                                "multi_select": {
                                  "type": "object",
                                  "properties": {
                                    "options": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "color": {
                                            "type": "string",
                                            "enum": [
                                              "default",
                                              "gray",
                                              "brown",
                                              "orange",
                                              "yellow",
                                              "green",
                                              "blue",
                                              "purple",
                                              "pink",
                                              "red"
                                            ]
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ],
                                        "additionalProperties": false
                                      },
                                      "maxItems": 100
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "multi_select"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "status"
                                  ]
                                },
                                "status": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "status"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "relation"
                                  ]
                                },
                                "relation": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "database_id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "database_id"
                                      ]
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "single_property": {
                                              "type": "object",
                                              "properties": {},
                                              "additionalProperties": false
                                            }
                                          },
                                          "required": [
                                            "single_property"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "dual_property": {
                                              "type": "object",
                                              "properties": {
                                                "synced_property_id": {
                                                  "type": "string"
                                                },
                                                "synced_property_name": {
                                                  "type": "string"
                                                }
                                              },
                                              "additionalProperties": false
                                            }
                                          },
                                          "required": [
                                            "dual_property"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "relation"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "rollup"
                                  ]
                                },
                                "rollup": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "function": {
                                          "type": "string",
                                          "minLength": 3,
                                          "maxLength": 17
                                        }
                                      },
                                      "required": [
                                        "function"
                                      ]
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "relation_property_name": {
                                              "type": "string"
                                            },
                                            "rollup_property_name": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "relation_property_name",
                                            "rollup_property_name"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "relation_property_id": {
                                              "type": "string"
                                            },
                                            "rollup_property_name": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "relation_property_id",
                                            "rollup_property_name"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "relation_property_name": {
                                              "type": "string"
                                            },
                                            "rollup_property_id": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "relation_property_name",
                                            "rollup_property_id"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "relation_property_id": {
                                              "type": "string"
                                            },
                                            "rollup_property_id": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "relation_property_id",
                                            "rollup_property_id"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "rollup"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "unique_id"
                                  ]
                                },
                                "unique_id": {
                                  "type": "object",
                                  "properties": {
                                    "prefix": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "unique_id"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "title"
                                  ]
                                },
                                "title": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "title"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "rich_text"
                                  ]
                                },
                                "rich_text": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "rich_text"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "url"
                                  ]
                                },
                                "url": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "url"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "people"
                                  ]
                                },
                                "people": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "people"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "files"
                                  ]
                                },
                                "files": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "files"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "email"
                                  ]
                                },
                                "email": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "email"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "phone_number"
                                  ]
                                },
                                "phone_number": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "phone_number"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "date"
                                  ]
                                },
                                "date": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "date"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "checkbox"
                                  ]
                                },
                                "checkbox": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "checkbox"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "created_by"
                                  ]
                                },
                                "created_by": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "created_by"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "created_time"
                                  ]
                                },
                                "created_time": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "created_time"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "last_edited_by"
                                  ]
                                },
                                "last_edited_by": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "last_edited_by"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "last_edited_time"
                                  ]
                                },
                                "last_edited_time": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "last_edited_time"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The new name of the property."
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "description": "Updates to make to the database's schema. Use null to remove a property, or provide the `name` only to rename a property."
              },
              "is_inline": {
                "type": "boolean",
                "description": "Whether the database should be displayed inline in the parent page, if you want to change this setting."
              },
              "in_trash": {
                "type": "boolean",
                "description": "Whether to move the database to the trash. WARNING: This operation currently cannot be undone without going to the Notion app UI. Make sure you want to do this before proceeding."
              }
            },
            "required": [
              "database_id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Update Notion database",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "create-comment",
          "description": "Add a comment to a page",
          "inputSchema": {
            "type": "object",
            "properties": {
              "parent": {
                "type": "object",
                "properties": {
                  "page_id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "page_id"
                    ]
                  }
                },
                "required": [
                  "page_id"
                ],
                "additionalProperties": false,
                "description": "The parent of the comment. This must be a page."
              },
              "rich_text": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "bold": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as bold."
                            },
                            "italic": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as italic."
                            },
                            "strikethrough": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with a strikethrough."
                            },
                            "underline": {
                              "type": "boolean",
                              "description": "Whether the text is formatted with an underline."
                            },
                            "code": {
                              "type": "boolean",
                              "description": "Whether the text is formatted as code."
                            },
                            "color": {
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 18
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            },
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "maxLength": 2000,
                                  "description": "The actual text content of the text."
                                },
                                "link": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the link."
                                        }
                                      },
                                      "required": [
                                        "url"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "description": "An object with information about any inline link in this text, if included."
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false,
                              "description": "If a rich text object's type value is `text`, then the corresponding text field contains an object including the text content and any inline link."
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "mention"
                              ]
                            },
                            "mention": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    },
                                    "user": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "object": {
                                              "type": "string",
                                              "enum": [
                                                "user"
                                              ],
                                              "description": "The user object type name."
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The name of the user."
                                                },
                                                "object": {
                                                  "type": "string",
                                                  "enum": [
                                                    "user"
                                                  ],
                                                  "description": "The user object type name."
                                                },
                                                "avatar_url": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "description": "The avatar URL of the user."
                                                }
                                              },
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "person"
                                                      ]
                                                    },
                                                    "person": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "description": "The email of the person."
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "person"
                                                  ],
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "bot"
                                                      ]
                                                    },
                                                    "bot": {
                                                      "type": "object",
                                                      "properties": {
                                                        "owner": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "user": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "email": {
                                                                          "type": "string",
                                                                          "description": "The email of the person."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "email"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    },
                                                                    {
                                                                      "type": "object",
                                                                      "properties": {
                                                                        "id": {
                                                                          "type": "string"
                                                                        },
                                                                        "object": {
                                                                          "type": "string",
                                                                          "enum": [
                                                                            "user"
                                                                          ],
                                                                          "description": "The user object type name."
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "id"
                                                                      ],
                                                                      "additionalProperties": false
                                                                    }
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `user`. This means the bot is for a public integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "user"
                                                              ],
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "workspace": {
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "true"
                                                                  ],
                                                                  "description": "Details about the owner of the bot, when the `type` of the owner is `workspace`. This means the bot is for an internal integration."
                                                                }
                                                              },
                                                              "required": [
                                                                "workspace"
                                                              ],
                                                              "additionalProperties": false
                                                            }
                                                          ]
                                                        },
                                                        "workspace_name": {
                                                          "type": [
                                                            "string",
                                                            "null"
                                                          ],
                                                          "description": "The name of the bot's workspace."
                                                        },
                                                        "workspace_limits": {
                                                          "type": "object",
                                                          "properties": {
                                                            "max_file_upload_size_in_bytes": {
                                                              "type": "integer",
                                                              "description": "The maximum allowable size of a file upload, in bytes"
                                                            }
                                                          },
                                                          "required": [
                                                            "max_file_upload_size_in_bytes"
                                                          ],
                                                          "additionalProperties": false
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "required": [
                                                    "bot"
                                                  ],
                                                  "additionalProperties": false
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "description": "Details of the user mention."
                                    }
                                  },
                                  "required": [
                                    "user"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "date"
                                      ]
                                    },
                                    "date": {
                                      "type": "object",
                                      "properties": {
                                        "start": {
                                          "type": "string",
                                          "format": "date",
                                          "description": "The start date of the date object."
                                        },
                                        "end": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "format": "date"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The end date of the date object, if any."
                                        },
                                        "time_zone": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "minLength": 2,
                                              "maxLength": 32
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "description": "The time zone of the date object, if any. E.g. America/Los_Angeles, Europe/London, etc."
                                        }
                                      },
                                      "required": [
                                        "start"
                                      ],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [
                                    "date"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "page"
                                      ]
                                    },
                                    "page": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the page mention."
                                    }
                                  },
                                  "required": [
                                    "page"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "database"
                                      ]
                                    },
                                    "database": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the database mention."
                                    }
                                  },
                                  "required": [
                                    "database"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "template_mention"
                                      ]
                                    },
                                    "template_mention": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_date"
                                              ]
                                            },
                                            "template_mention_date": {
                                              "type": "string",
                                              "enum": [
                                                "today",
                                                "now"
                                              ],
                                              "description": "The date of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_date"
                                          ],
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "template_mention_user"
                                              ]
                                            },
                                            "template_mention_user": {
                                              "type": "string",
                                              "enum": [
                                                "me"
                                              ],
                                              "description": "The user of the template mention."
                                            }
                                          },
                                          "required": [
                                            "template_mention_user"
                                          ],
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "template_mention"
                                  ],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_emoji"
                                      ]
                                    },
                                    "custom_emoji": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the custom emoji."
                                        },
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the custom emoji."
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "additionalProperties": false,
                                      "description": "Details of the custom emoji mention."
                                    }
                                  },
                                  "required": [
                                    "custom_emoji"
                                  ],
                                  "additionalProperties": false
                                }
                              ],
                              "description": "Mention objects represent an inline mention of a database, date, link preview mention, page, template mention, or user. A mention is created in the Notion UI when a user types `@` followed by the name of the reference."
                            }
                          },
                          "required": [
                            "mention"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "equation"
                              ]
                            },
                            "equation": {
                              "type": "object",
                              "properties": {
                                "expression": {
                                  "type": "string",
                                  "description": "A KaTeX compatible string."
                                }
                              },
                              "required": [
                                "expression"
                              ],
                              "additionalProperties": false,
                              "description": "Notion supports inline LaTeX equations as rich text objects with a type value of `equation`."
                            }
                          },
                          "required": [
                            "equation"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  ]
                },
                "maxItems": 100,
                "description": "An array of rich text objects that represent the content of the comment."
              }
            },
            "required": [
              "parent",
              "rich_text"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Create a page comment",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "get-comments",
          "description": "Get all comments of a page",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page_id": {
                "type": "string",
                "description": "Identifier for a Notion page."
              }
            },
            "required": [
              "page_id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "annotations": {
            "title": "Get page comments",
            "readOnlyHint": true,
            "openWorldHint": false
          }
        },
        {
          "name": "get-users",
          "description": "List all users",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "object",
                "properties": {
                  "start_cursor": {
                    "type": "string"
                  },
                  "page_size": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get-self",
          "description": "Retrieve your token's bot user",
          "inputSchema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get-user",
          "description": "Retrieve a user",
          "inputSchema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "user_id"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "resources": [
        {
          "uri": "notion://docs/enhanced-markdown-spec",
          "name": "Enhanced Markdown Specification",
          "title": "Enhanced Markdown Specification",
          "description": "Complete specification for Notion's enhanced Markdown format, including all block types, rich text formatting, and XML elements. This specification is subject to change as Notion's capabilities evolve.",
          "mimeType": "text/plain"
        }
      ],
      "prompts": [],
      "status": "online",
      "lastIndexed": "2025-07-30T20:30:09.484Z",
      "connectionTest": {
        "success": true,
        "responseTime": 3092,
        "timestamp": "2025-07-30T20:30:09.484Z"
      },
      "searchKeywords": "notion notion notion mcp search fetch create-pages update-page move-pages duplicate-page create-database update-database create-comment get-comments get-users get-self get-user perform a search over:\n- \"internal\": perform a semantic search over your entire notion workspace and connected\nsources (slack, google drive, github, jira, microsoft teams, sharepoint, onedrive, or\nlinear).\n- \"users\": perform a search over the notion users in the current workspace.\nyou can use search when you need to find information which is not already available via\nother tools, and you don't know where it's located.\nif the user doesn't have access to notion ai features, the search will automatically fall\nback to a workspace search that doesn't use ai or include connected sources. this will be\nindicated by the \"type\" field in the response being \"workspace_search\" instead of\n\"ai_search\".\ndo not use search to get information about a database's integrations, views, or other\ncomponents.\nif initial results do not contain all the information you need, you can try more specific\nqueries.\nafter obtaining internal search results, if the user asks for the full contents of a page or\ndatabase, use the \"fetch\" tool. this tool only shows some details like a highlight and the\nurl and title of each search result.\nto find pages under a notion database, use this tool and supply the database's url as the\ndata_source_url parameter. these look like \"collection://f336d0bc-b841-465b-8045-024475c079dd\".\nyou can get this url by using the \"fetch\" tool to view the database and copying the url from\nthe <data-source url=\"...\"> block. keep in mind that notion-flavored markdown has this\nconcept of a hierarchy of <database> blocks that contain <data-source> blocks, but users\naren't familiar with the notion \"data source\" terminology or product. prefer to refer to\nboth of them as \"databases\" in your response to humans to avoid confusion.\nexamples of searches:\n1. search for information across the workspace:\n{\n\"query\": \"quarterly revenue report\",\n\"query_type\": \"internal\"\n}\n2. search within a specific page and its children:\n{\n\"query\": \"meeting notes action items\",\n\"query_type\": \"internal\",\n\"page_url\": \"https://www.notion.so/workspace/team-hub-1234567890abcdef\"\n}\n3. search within a database's pages:\n{\n\"query\": \"design review feedback\",\n\"query_type\": \"internal\",\n\"data_source_url\": \"collection://f336d0bc-b841-465b-8045-024475c079dd\"\n}\n4. search within a specific teamspace:\n{\n\"query\": \"project updates\",\n\"query_type\": \"internal\",\n\"teamspace_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"\n}\n5. search for users:\n{\n\"query\": \"john@example.com\",\n\"query_type\": \"user\"\n}\n6. find users by partial name:\n{\n\"query\": \"sarah\",\n\"query_type\": \"user\"\n}\ncommon use cases:\n- \"what does the sales team require from the product team in the next quarter?\"\n- \"find all meeting notes that mention the new pricing strategy\"\n- \"which pages discuss the api migration project?\"\n- \"find all team members with email addresses ending in @design.company.com\"\n- \"what are the latest updates on the mobile app redesign?\" retrieves details about a notion entity by its url or id.\nyou can fetch the following types of entities:\n- page, i.e. from a <page> block or a <mention-page> mention\n- database, i.e. from a <database> block or a <mention-database> mention\nuse the \"fetch\" tool when you need to see the details of a notion entity you already know\nexists and have its url or id.\nprovide the notion entity's url or id in the `id` parameter. you must make multiple calls\nto the \"fetch\" tool if you want to fetch multiple entities.\ncontent for pages that are returned use the enhanced markdown format, which is a superset of\nthe standard markdown syntax. see the full spec in the description of the \"create-pages\"\ntool.\nnotion does not currently have a public concept of data sources, and only supports databases.\nwhen rendering the response from this tool, assume the database only has one data source and\ndisplay the details of the data source as the database, removing any mention of \"data\nsources\" from the result.\nexamples of fetching entities:\n1. fetch a page by url:\n{\n\"id\": \"https://www.notion.so/workspace/product-requirements-1234567890abcdef\"\n}\n2. fetch a page by id (uuidv4 with dashes):\n{\n\"id\": \"12345678-90ab-cdef-1234-567890abcdef\"\n}\n3. fetch a page by id (uuidv4 without dashes):\n{\n\"id\": \"1234567890abcdef1234567890abcdef\"\n}\n4. fetch a database:\n{\n\"id\": \"https://www.notion.so/workspace/projects-database-abcdef1234567890\"\n}\ncommon use cases:\n- \"what are the product requirements still need to be implemented from this ticket\nhttps://notion.so/page-url?\"\n- \"show me the details of the project database at this url\"\n- \"get the content of page 12345678-90ab-cdef-1234-567890abcdef\" creates one or more notion pages with specified properties and content.\nuse \"create-pages\" when you need to create one or more new pages that don't exist yet.\nalways include a title property under `properties` in each entry of the `pages` array.\notherwise, the page title will appear blank even if the page content is populated. don't\nduplicate the page title at the top of the page's `content`.\nwhen creating pages under a notion database, the property names must match the database's\nschema. use the \"fetch\" tool with a notion database url to get the database schema. or, look\nfor existing pages under the database using the \"search\" tool then use the \"fetch\" tool to see\nthe names of the property keys. one exception is the \"title\" property, which all pages have,\nbut can be named differently in the schema of a database. for convenience, you can use the\ngeneric property name \"title\" in the \"properties\" object, and it will automatically be\nre-mapped to the actual name of the title property in the database schema when creating the\npage.\nall pages created with a single call to this tool will have the same parent.\nthe parent can be a notion page or database. if the parent is omitted, the pages will be\ncreated as standalone, workspace-level private pages and the person that created them\ncan organize them as they see fit later.\nexamples of creating pages:\n1. create a standalone page with a title and content:\n{\n\"pages\": [\n{\n\"properties\": {\"title\":\"page title\"},\n\"content\": \"# section 1\nsection 1 content\n# section 2\nsection 2 content\"\n}\n]\n}\n2. create a page in a tasks database with url {{3}} and properties \"task name\" and \"status\":\n{\n\"parent\": {\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"},\n\"pages\": [\n{\n\"properties\": {\n\"task name\": \"task 123\",\n\"status\": \"in progress\",\n},\n},\n],\n}\n3. create a page with an existing page as a parent:\n{\n\"parent\": {\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\"},\n\"pages\": [\n{\n\"properties\": {\"title\": \"page title\"},\n\"content\": \"# section 1\nsection 1 content\n# section 2\nsection 2 content\"\n}\n]\n}\nthe enhanced markdown format used for page content is a superset of the standard markdown\nsyntax. here is the full spec, but please note that notion does not yet use the data source\nterminology, and only supports databases. ignore anything related to \"data sources\" and assume\ndatabases can only define one schema for now.\nnotion-flavored markdown is a variant of standard markdown with additional features to support all block and rich text types.\nuse tabs for indentation.\nuse backslashes to escape characters. for example, * will render as * and not as a bold delimiter.\nblock types:\nmarkdown blocks use a {color=\"color\"} attribute list to set a block color.\ntext:\nrich text {color=\"color\"}\nchildren\nheadings:\n# rich text {color=\"color\"}\n## rich text {color=\"color\"}\n### rich text {color=\"color\"}\n(headings 4, 5, and 6 are not supported in notion and will be converted to heading 3.)\nbulleted list:\n- rich text {color=\"color\"}\nchildren\nnumbered list:\n1. rich text {color=\"color\"}\nchildren\nquote:\n> rich text {color=\"color\"}\nchildren\nto-do:\n- [ ] rich text {color=\"color\"}\nchildren\n- [x] rich text {color=\"color\"}\nchildren\ntoggle:\n▶ rich text {color=\"color\"}\nchildren\ntoggle heading 1:\n▶# rich text {color=\"color\"}\nchildren\ntoggle heading 2:\n▶## rich text {color=\"color\"}\nchildren\ntoggle heading 3:\n▶### rich text {color=\"color\"}\nchildren\nfor toggles and toggle headings, the children must be indented in order for them to be toggleable. if you do not indent the children, they will not be contained within the toggle or toggle heading.\ndivider:\n---\ntable:\n| rich text | rich text |\n| --- | --- |\n| rich text | rich text |\nequation:\n$$\nequation\n$$\ncode:\n```language\ncode\n```\nxml blocks use the \"color\" attribute to set a block color.\ncallout:\n<callout icon?=\"emoji\" color?=\"color\">\nchildren\n</callout>\ncolumns:\n<columns>\n<column>\nchildren\n</column>\n<column>\nchildren\n</column>\n</columns>\npage:\n<page url=\"{{url}}\" color?=\"color\">title</page>\nsub-pages can be viewed using the \"view\" tool.\nto create a new sub-page, omit the url. you can then update the page content and properties with the \"update-page\" tool. example: <page>new page</page>\ndatabase:\n<database url=\"{{url}}\" inline?=\"{true|false}\" color?=\"color\">title</database>\nto create a new database, omit the url. you can then update the database properties and content with the \"update-database\" tool. example: <database>new database</database>\nthe \"inline\" toggles how the database is displayed in the ui. if it is true, the database is fully visible and interactive on the page. if false, the database is displayed as a sub-page.\nthere is no \"data source\" block type. data sources are always inside a database, and only databases can be inserted into a page.\naudio:\n<audio source=\"{{url}}\" color?=\"color\">caption</audio>\nfile:\nfile content can be viewed using the \"view\" tool.\n<file source=\"{{url}}\" color?=\"color\">caption</file>\nimage:\nimage content can be viewed using the \"view\" tool.\n<image source=\"{{url}}\" color?=\"color\">caption</image>\npdf:\npdf content can be viewed using the \"view\" tool.\n<pdf source=\"{{url}}\" color?=\"color\">caption</pdf>\nvideo:\n<video source=\"{{url}}\" color?=\"color\">caption</video>\ntable of contents:\n<table_of_contents color?=\"color\"/>\nsynced block:\nthe original source for a synced block.\nwhen creating a new synced block, do not provide the url. after inserting the synced block into a page, the url will be provided.\n<synced_block url=?\"{{url}}\">\nchildren\n</synced_block>\nsynced block reference:\na reference to a synced block.\nthe synced block must already exist and url must be provided.\nyou can directly update the children of the synced block reference and it will update both the original synced block and the synced block reference.\n<synced_block_reference url=\"{{url}}\">\nchildren\n</synced_block_reference>\ntranscription:\n<transcription>\nrich text (transcript title)\n<summary>\nai-generated summary of the notes + transcript\n</summary>\n<notes>\nuser notes\n</notes>\n<transcript>\ntranscript of the audio (cannot be edited)\n</transcript>\n</transcription>\nnote: the <transcript> tag contains a raw transcript and cannot be edited.\nunknown (a block type that is not supported in the api yet):\n<unknown url=\"{{url}}\" alt=\"alt\"/>\nrich text types:\nbold:\n**rich text**\nitalic:\n*rich text*\nstrikethrough:\n~~rich text~~\nunderline:\n<span underline=\"true\">rich text</span>\nstrikethrough:\n~~rich text~~\ninline code:\n`code`\nlink:\n[link text](url)\ncitation:\n[^url]\nto create a citation, you can either reference a compressed url like [^{{1}}], or a full url like [^https://example.com].\ncolors:\n<span color?=\"color\">rich text</span>\ninline math:\n$equation$ or $`equation`$ if you want to use markdown delimiters within the equation.\nthere must be whitespace before the starting $ symbol and after the ending $ symbol. there must not be whitespace right after the starting $ symbol or before the ending $ symbol.\ninline line breaks within rich text:\n<br>\nmentions:\n,\nuser:\n<mention-user url=\"{{url}}\">user name</mention-user>\nthe url must always be provided, and refer to an existing user.\nproviding the user name is optional. in the ui, the name will always be displayed.\npage:\n<mention-page url=\"{{url}}\">page title</mention-page>\nthe url must always be provided, and refer to an existing page.\nproviding the page title is optional. in the ui, the title will always be displayed.\nmentioned pages can be viewed using the \"view\" tool.\ndatabase:\n<mention-database url=\"{{url}}\">database name</mention-database>\nthe url must always be provided, and refer to an existing database.\nproviding the database name is optional. in the ui, the name will always be displayed.\nmentioned databases can be viewed using the \"view\" tool.\ndate:\n<mention-date start=\"yyyy-mm-dd\" end=\"yyyy-mm-dd\"/>\ndatetime:\n<mention-date start=\"yyyy-mm-ddthh:mm:ssz\" end=\"yyyy-mm-ddthh:mm:ssz\"/>\ncustom emoji:\n:emoji_name:\ncustom emoji are rendered as the emoji name surrounded by colons.\ncolors:\nonly use colors in markdown blocks when the user has explicitly asked for them.\ntext colors (renders as colored text a transparent background):\ngray,brown,orange,yellow,green,blue,purple,pink,red\nbackground colors (renders as colored background with contrasting text):\ngray_bg,brown_bg,orange_bg,yellow_bg,green_bg,blue_bg,purple_bg,pink_bg,red_bg update a notion page's properties or content.\nnotion page properties are a json map of property names to sqlite values.\nfor pages in a database, use the sqlite schema definition shown in <database>.\nfor pages outside of a database, the only allowed property is \"title\", which is the title of\nthe page and is automatically shown at the top of the page as a large heading.\nnotion page content is a string in notion-flavored markdown format. see the \"create-pages\"\ntool description for the full enhanced markdown spec.\nbefore updating a page's content with this tool, use the \"fetch\" tool first to get the\nexisting content to find out the markdown snippets to use in the \"replace_content_range\" or\n\"insert_content_after\" commands.\nexamples:\n(1) update page properties:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"update_properties\",\n\"properties\": {\n\"title\": \"new page title\",\n\"status\": \"in progress\",\n\"checkbox\": \"__yes__\"\n}\n}\nuse the \"fetch\" tool to find the existing properties of the page to make sure your changes\ninclude all property names and values, and are spelled correctly, for pages under a database.\na title property is required for pages in a database but may not be named \"title\" so be sure\nto use the correct property name. for pages outside of a database, the only allowed property\nis \"title\" and it will always be named \"title\".\n(2) replace the entire content of a page:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"replace_content\",\n\"new_str\": \"# new section\nupdated content goes here\"\n}\n(3) replace specific content in a page:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"replace_content_range\",\n\"selection_with_ellipsis\": \"# old section...end of section\",\n\"new_str\": \"# new section\nupdated content goes here\"\n}\nremember you should not include the entire string to replace, only the first ~10 characters,\nan ellipsis, and the last ~10 characters.\nhowever, the start and end of the range must have enough characters to be able to uniquely\nidentify the range in the page; do not use an ambiguous or repeated selection.\nif you get errors, try using a longer or different selection.\n(4) insert content after specific text:\n{\n\"page_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"command\": \"insert_content_after\",\n\"selection_with_ellipsis\": \"## previous section...\",\n\"new_str\": \"\n## new section\ncontent to insert goes here\"\n} move one or more notion pages or databases to a new parent. duplicate a notion page. the page must be within the current workspace, and you must have permission to access it. the duplication completes asynchronously, so do not rely on the new page identified by the returned id or url to be populated immediately. let the user know that the duplication is in progress and that they can check back later using the 'fetch' tool or by clicking the returned url and viewing it in the notion app. creates a new notion database with the specified properties. update a notion database's properties, name, description, or other attributes.\nthe tool returns a rendered markdown string showing the updated database structure,\nincluding its properties, data sources, and schema information.\ndatabase properties define the columns/fields that pages in the database can have.\neach property has a type (text, number, select, etc.) and configuration options.\nexamples:\n(1) update database title and description:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"title\": [{\"type\": \"text\", \"text\": {\"content\": \"project tracker 2024\"}}],\n\"description\": [{\"type\": \"text\", \"text\": {\"content\": \"track all projects and deliverables\"}}]\n}\n(2) add new properties to a database:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"priority\": {\n\"select\": {\n\"options\": [\n{\"name\": \"high\", \"color\": \"red\"},\n{\"name\": \"medium\", \"color\": \"yellow\"},\n{\"name\": \"low\", \"color\": \"green\"}\n]\n}\n},\n\"due date\": {\"date\": {}},\n\"assigned to\": {\"people\": {}}\n}\n}\n(3) rename an existing property (use the property id or current name):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"status\": {\"name\": \"project status\"}\n}\n}\n(4) remove a property (set to null):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"properties\": {\n\"old property\": null\n}\n}\n(5) change display mode from inline to full page:\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"is_inline\": false\n}\n(6) move database to trash (warning: cannot be undone without going to the notion app ui so\nexplicitly confirm with the user that they really want to do this):\n{\n\"database_id\": \"f336d0bc-b841-465b-8045-024475c079dd\",\n\"in_trash\": true\n}\ncommon property types:\n- title: the main property (required, cannot be deleted)\n- rich_text: multi-line text\n- number: numeric values with optional formatting\n- select: single choice from options\n- multi_select: multiple choices from options\n- date: date with optional time\n- people: user references\n- checkbox: boolean values\n- url: web links\n- email: email addresses\n- phone_number: phone numbers\n- formula: calculated values based on other properties\n- relation: links to pages in another database\n- rollup: aggregated values from related pages\nnotes:\n- you cannot delete or create new title properties\n- a database can only have one unique_id property\n- synced databases cannot be updated\n- use the \"fetch\" tool first to see the current database schema add a comment to a page get all comments of a page list all users retrieve your token's bot user retrieve a user registry"
    },
    {
      "name": "linear",
      "displayName": "linear",
      "connection": {
        "type": "command",
        "command": "npx",
        "args": [
          "-y",
          "mcp-remote",
          "https://mcp.linear.app/sse"
        ],
        "env": {}
      },
      "description": "Linear OAuth Proxy",
      "category": "registry",
      "version": "1.0.0",
      "mcpVersion": "2024-11-05",
      "tools": [
        {
          "name": "list_comments",
          "description": "Retrieve comments for a Linear issue by ID",
          "inputSchema": {
            "type": "object",
            "properties": {
              "issueId": {
                "type": "string",
                "description": "The issue ID"
              }
            },
            "required": [
              "issueId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "create_comment",
          "description": "Create a comment on a Linear issue by ID",
          "inputSchema": {
            "type": "object",
            "properties": {
              "issueId": {
                "type": "string",
                "description": "The issue ID"
              },
              "parentId": {
                "type": "string",
                "description": "A parent comment ID to reply to"
              },
              "body": {
                "type": "string",
                "description": "The content of the comment as Markdown"
              }
            },
            "required": [
              "issueId",
              "body"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_cycles",
          "description": "Retrieve cycles for a Linear team by ID",
          "inputSchema": {
            "type": "object",
            "properties": {
              "teamId": {
                "type": "string",
                "description": "The team ID"
              },
              "type": {
                "type": "string",
                "enum": [
                  "current",
                  "previous",
                  "next"
                ],
                "description": "Retrieve the current, previous, next, or all cycles. If no type is provided all cycles in the team will be returned"
              }
            },
            "required": [
              "teamId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get_document",
          "description": "Retrieve a Linear document by ID or slug",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The document ID or slug"
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_documents",
          "description": "List documents in the user's Linear workspace",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "maximum": 250,
                "default": 50,
                "description": "The number of items to return (Max is 250)"
              },
              "before": {
                "type": "string",
                "description": "A UUID to end at"
              },
              "after": {
                "type": "string",
                "description": "A UUID to start from"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "updatedAt"
                ],
                "default": "updatedAt"
              },
              "query": {
                "type": "string",
                "description": "An optional search query"
              },
              "projectId": {
                "type": "string",
                "description": "Filter by project ID"
              },
              "initiativeId": {
                "type": "string",
                "description": "Filter by initiative ID"
              },
              "creatorId": {
                "type": "string",
                "description": "Filter by creator ID"
              },
              "createdAt": {
                "type": "string",
                "description": "Return only documents created on or after this ISO-8601 date-time or duration. e.g. -P1D to get documents created in the last day"
              },
              "updatedAt": {
                "type": "string",
                "description": "Return only documents updated on or after this ISO-8601 date-time or duration. e.g. -P1D to get documents updated in the last day"
              },
              "includeArchived": {
                "type": "boolean",
                "default": false,
                "description": "Whether to include archived documents"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get_issue",
          "description": "Retrieve a Linear issue details by ID, including attachments and git branch name",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The issue ID"
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_issues",
          "description": "List issues in the user's Linear workspace",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "maximum": 250,
                "default": 50,
                "description": "The number of items to return (Max is 250)"
              },
              "before": {
                "type": "string",
                "description": "A UUID to end at"
              },
              "after": {
                "type": "string",
                "description": "A UUID to start from"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "updatedAt"
                ],
                "default": "updatedAt"
              },
              "query": {
                "type": "string",
                "description": "An optional search query"
              },
              "teamId": {
                "type": "string",
                "description": "The team UUID"
              },
              "stateId": {
                "type": "string",
                "description": "The state UUID"
              },
              "cycleId": {
                "type": "string",
                "description": "The cycle UUID"
              },
              "assigneeId": {
                "type": "string",
                "description": "The assignee UUID"
              },
              "delegateId": {
                "type": "string",
                "description": "The delegated agent user UUID"
              },
              "parentId": {
                "type": "string",
                "description": "The parent issue UUID"
              },
              "projectId": {
                "type": "string",
                "description": "The project UUID"
              },
              "createdAt": {
                "type": "string",
                "description": "Return only issues created on or after this ISO-8601 date-time or duration. e.g. -P1D to get issues created in the last day"
              },
              "updatedAt": {
                "type": "string",
                "description": "Return only issues updated on or after this ISO-8601 date-time or duration. e.g. -P1D to get issues updated in the last day"
              },
              "includeArchived": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include archived issues"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "create_issue",
          "description": "Create a new Linear issue",
          "inputSchema": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The issue title"
              },
              "description": {
                "type": "string",
                "description": "The issue description as Markdown"
              },
              "teamId": {
                "type": "string",
                "description": "The team UUID"
              },
              "cycleId": {
                "type": "string",
                "description": "The cycle UUID to add the issue to"
              },
              "priority": {
                "type": "number",
                "description": "The issue priority. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low."
              },
              "projectId": {
                "type": "string",
                "description": "The project UUID to add the issue to"
              },
              "parentId": {
                "type": "string",
                "description": "The parent issue UUID, if this is a sub-issue"
              },
              "stateId": {
                "type": "string",
                "description": "The issue state UUID"
              },
              "assigneeId": {
                "type": "string",
                "description": "The assignee UUID"
              },
              "delegateId": {
                "type": "string",
                "description": "The UUID of the agent user to delegate the issue to"
              },
              "labelIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of label UUIDs to set on the issue"
              },
              "dueDate": {
                "type": "string",
                "description": "The due date for the issue in ISO format"
              },
              "links": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "title": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "url",
                    "title"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of link objects to attach to the issue. Each object must contain a valid `url` and a non-empty `title`."
              }
            },
            "required": [
              "title",
              "teamId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "update_issue",
          "description": "Update an existing Linear issue",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The issue ID"
              },
              "title": {
                "type": "string",
                "description": "The issue title"
              },
              "description": {
                "type": "string",
                "description": "The issue description as Markdown"
              },
              "priority": {
                "type": "number",
                "description": "The issue priority. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low."
              },
              "projectId": {
                "type": "string",
                "description": "The project UUID to add the issue to"
              },
              "parentId": {
                "type": "string",
                "description": "The parent issue UUID, if this is a sub-issue"
              },
              "stateId": {
                "type": "string",
                "description": "The issue state UUID"
              },
              "cycleId": {
                "type": "string",
                "description": "The cycle UUID"
              },
              "assigneeId": {
                "type": "string",
                "description": "The assignee UUID"
              },
              "delegateId": {
                "type": "string",
                "description": "The delegated agent user UUID"
              },
              "labelIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of label UUIDs to set on the issue"
              },
              "dueDate": {
                "type": "string",
                "description": "The due date for the issue in ISO format"
              },
              "estimate": {
                "type": "number",
                "description": "The numerical issue estimate value"
              },
              "links": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "title": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "url",
                    "title"
                  ],
                  "additionalProperties": false
                },
                "description": "Array of link objects to attach to the issue. Each object must contain a valid `url` and a non-empty `title`."
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_issue_statuses",
          "description": "List available issues statuses in a Linear team",
          "inputSchema": {
            "type": "object",
            "properties": {
              "teamId": {
                "type": "string",
                "description": "The team UUID"
              }
            },
            "required": [
              "teamId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get_issue_status",
          "description": "Retrieve details of a specific issue status in Linear by name or ID",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The UUID or name of the issue status to retrieve"
              },
              "teamId": {
                "type": "string",
                "description": "The team UUID"
              }
            },
            "required": [
              "query",
              "teamId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_my_issues",
          "description": "List issues assigned to the current user",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "maximum": 250,
                "default": 50,
                "description": "The number of items to return (Max is 250)"
              },
              "before": {
                "type": "string",
                "description": "A UUID to end at"
              },
              "after": {
                "type": "string",
                "description": "A UUID to start from"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "updatedAt"
                ],
                "default": "updatedAt"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_issue_labels",
          "description": "List available issue labels in a Linear workspace or team",
          "inputSchema": {
            "type": "object",
            "properties": {
              "teamId": {
                "type": "string",
                "description": "The team UUID"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_projects",
          "description": "List projects in the user's Linear workspace",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "maximum": 250,
                "default": 50,
                "description": "The number of items to return (Max is 250)"
              },
              "before": {
                "type": "string",
                "description": "A UUID to end at"
              },
              "after": {
                "type": "string",
                "description": "A UUID to start from"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "updatedAt"
                ],
                "default": "updatedAt"
              },
              "includeArchived": {
                "type": "boolean",
                "default": false,
                "description": "Whether to include archived projects"
              },
              "teamId": {
                "type": "string",
                "description": "A team UUID to filter by"
              },
              "createdAt": {
                "type": "string",
                "description": "Return only projects created on or after this ISO-8601 date-time or duration. e.g. -P1D to get projects created in the last day"
              },
              "updatedAt": {
                "type": "string",
                "description": "Return only projects updated on or after this ISO-8601 date-time or duration. e.g. -P1D to get projects updated in the last day"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get_project",
          "description": "Retrieve details of a specific project in Linear",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The ID or name of the project to retrieve"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "create_project",
          "description": "Create a new project in Linear",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "A descriptive name of the project"
              },
              "summary": {
                "type": "string",
                "description": "A concise plaintext summary of the project (max 255 chars)"
              },
              "description": {
                "type": "string",
                "description": "The full project description in Markdown format"
              },
              "startDate": {
                "type": "string",
                "description": "The start date of the project in ISO format"
              },
              "targetDate": {
                "type": "string",
                "description": "The target date of the project in ISO format"
              },
              "teamId": {
                "type": "string",
                "description": "The UUID of the team to associate the project with"
              },
              "labelIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of label UUIDs to set on the project"
              },
              "leadId": {
                "type": "string",
                "description": "The UUID of the user to set as project lead"
              }
            },
            "required": [
              "name",
              "teamId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "update_project",
          "description": "Update an existing Linear project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the project to update"
              },
              "name": {
                "type": "string",
                "description": "The new name of the project"
              },
              "summary": {
                "type": "string",
                "description": "A concise plaintext summary of the project (max 255 chars)"
              },
              "description": {
                "type": "string",
                "description": "The full project description in Markdown format"
              },
              "startDate": {
                "type": "string",
                "description": "The start date of the project in ISO format"
              },
              "targetDate": {
                "type": "string",
                "description": "The target date of the project in ISO format"
              },
              "labelIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of label UUIDs to set on the project"
              },
              "leadId": {
                "type": "string",
                "description": "The UUID of the user to set as project lead"
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_project_labels",
          "description": "List available project labels in the Linear workspace",
          "inputSchema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_teams",
          "description": "List teams in the user's Linear workspace",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "maximum": 250,
                "default": 50,
                "description": "The number of items to return (Max is 250)"
              },
              "before": {
                "type": "string",
                "description": "A UUID to end at"
              },
              "after": {
                "type": "string",
                "description": "A UUID to start from"
              },
              "orderBy": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "updatedAt"
                ],
                "default": "updatedAt"
              },
              "query": {
                "type": "string",
                "description": "An optional search query"
              },
              "includeArchived": {
                "type": "boolean",
                "default": false,
                "description": "Whether to include archived teams"
              },
              "createdAt": {
                "type": "string",
                "description": "Return only teams created on or after this ISO-8601 date-time or duration. e.g. -P1D to get teams created in the last day"
              },
              "updatedAt": {
                "type": "string",
                "description": "Return only teams updated on or after this ISO-8601 date-time or duration. e.g. -P1D to get teams updated in the last day"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get_team",
          "description": "Retrieve details of a specific Linear team",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The UUID, key, or name of the team to retrieve"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_users",
          "description": "Retrieve users in the Linear workspace",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "get_user",
          "description": "Retrieve details of a specific Linear user",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The UUID or name of the user to retrieve"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "search_documentation",
          "description": "Search Linear's documentation to learn about features and usage",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The search query"
              },
              "page": {
                "type": "number",
                "default": 0,
                "description": "The page number"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "resources": [],
      "prompts": [],
      "status": "online",
      "lastIndexed": "2025-07-30T20:30:08.168Z",
      "connectionTest": {
        "success": true,
        "responseTime": 1774,
        "timestamp": "2025-07-30T20:30:08.168Z"
      },
      "searchKeywords": "linear linear linear oauth proxy list_comments create_comment list_cycles get_document list_documents get_issue list_issues create_issue update_issue list_issue_statuses get_issue_status list_my_issues list_issue_labels list_projects get_project create_project update_project list_project_labels list_teams get_team list_users get_user search_documentation retrieve comments for a linear issue by id create a comment on a linear issue by id retrieve cycles for a linear team by id retrieve a linear document by id or slug list documents in the user's linear workspace retrieve a linear issue details by id, including attachments and git branch name list issues in the user's linear workspace create a new linear issue update an existing linear issue list available issues statuses in a linear team retrieve details of a specific issue status in linear by name or id list issues assigned to the current user list available issue labels in a linear workspace or team list projects in the user's linear workspace retrieve details of a specific project in linear create a new project in linear update an existing linear project list available project labels in the linear workspace list teams in the user's linear workspace retrieve details of a specific linear team retrieve users in the linear workspace retrieve details of a specific linear user search linear's documentation to learn about features and usage registry"
    },
    {
      "name": "hyperbrowser",
      "displayName": "hyperbrowser",
      "connection": {
        "type": "command",
        "command": "npx",
        "args": [
          "-y",
          "hyperbrowser-mcp"
        ],
        "env": {
          "HYPERBROWSER_API_KEY": "API_KEY_HERE"
        }
      },
      "description": "hyperbrowser",
      "category": "registry",
      "version": "1.0.24",
      "mcpVersion": "2024-11-05",
      "tools": [
        {
          "name": "scrape_webpage",
          "description": "Scrape a webpage and extract its content in various formats. This tool allows fetching content from a single URL with configurable browser behavior options. Use this for extracting text content, HTML structure, collecting links, or capturing screenshots of webpages.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL of the webpage to scrape"
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              },
              "outputFormat": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "markdown",
                    "html",
                    "links",
                    "screenshot"
                  ]
                },
                "minItems": 1,
                "description": "The format of the output"
              }
            },
            "required": [
              "url",
              "outputFormat"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "crawl_webpages",
          "description": "Crawl a website starting from a URL and explore linked pages. This tool allows systematic collection of content from multiple pages within a domain. Use this for larger data collection tasks, content indexing, or site mapping.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL of the webpage to crawl."
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              },
              "outputFormat": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "markdown",
                    "html",
                    "links",
                    "screenshot"
                  ]
                },
                "minItems": 1,
                "description": "The format of the output"
              },
              "followLinks": {
                "type": "boolean",
                "description": "Whether to follow links on the crawled webpages"
              },
              "maxPages": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "minimum": 1,
                "maximum": 100,
                "default": 10
              },
              "ignoreSitemap": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "url",
              "outputFormat",
              "followLinks"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "extract_structured_data",
          "description": "Extract structured data from a webpage. This tool allows you to extract structured data from a webpage using a schema.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "urls": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The list of URLs of the webpages to extract structured information from. Can include wildcards (e.g. https://example.com/*)"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to use for the extraction"
              },
              "schema": {
                "description": "The json schema to use for the extraction. Must provide an object describing a spec compliant json schema, any other types are invalid."
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              }
            },
            "required": [
              "urls",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "browser_use_agent",
          "description": "This tool employs an open-source browser automation agent optimized specifically for fast, efficient, and cost-effective browser tasks using a cloud browser. It requires explicit, detailed instructions to perform highly specific interactions quickly.\n\nOptimal for tasks requiring:\n- Precise, explicitly defined interactions and actions\n- Speed and efficiency with clear, unambiguous instructions\n- Cost-effective automation at scale with straightforward workflows\n\nBest suited use cases include:\n- Explicitly defined registration and login processes\n- Clearly guided navigation through web apps\n- Structured, step-by-step web scraping with detailed guidance\n- Extracting data via explicitly specified browser interactions\n\nYou must provide extremely detailed step-by-step instructions, including exact elements, actions, and explicit context. Clearly define the desired outcome for optimal results. Returns the completed result or an error message if issues arise.\n\nNote: This agent trades off flexibility for significantly faster performance and lower costs compared to Claude and OpenAI agents.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string",
                "description": "The task to perform inside the browser"
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              },
              "returnStepInfo": {
                "type": "boolean",
                "default": false,
                "description": "Whether to return step-by-step information about the task.Should be false by default. May contain excessive information, so we strongly recommend setting this to false."
              },
              "maxSteps": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "minimum": 1,
                "maximum": 100,
                "default": 25
              }
            },
            "required": [
              "task"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "openai_computer_use_agent",
          "description": "This tool utilizes OpenAI's model to autonomously execute general-purpose browser-based tasks with balanced performance and reliability using a cloud browser. It handles complex interactions effectively with practical reasoning and clear execution.\n\nOptimal for tasks requiring:\n- Reliable, general-purpose browser automation\n- Clear, structured interactions with moderate complexity\n- Efficient handling of common web tasks and workflows\n\nBest suited use cases include:\n- Standard multi-step registration or form submissions\n- Navigating typical web applications requiring multiple interactions\n- Conducting structured web research tasks\n- Extracting data through interactive web processes\n\nProvide a clear step-by-step description, necessary context, and expected outcomes. Returns the completed result or an error message if issues arise.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string",
                "description": "The task to perform inside the browser"
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              },
              "returnStepInfo": {
                "type": "boolean",
                "default": false,
                "description": "Whether to return step-by-step information about the task.Should be false by default. May contain excessive information, so we strongly recommend setting this to false."
              },
              "maxSteps": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "minimum": 1,
                "maximum": 100,
                "default": 25
              }
            },
            "required": [
              "task"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "claude_computer_use_agent",
          "description": "This tool leverages Anthropic's Claude model to autonomously execute complex browser tasks with sophisticated reasoning capabilities using a cloud browser. It specializes in handling intricate, nuanced, or highly context-sensitive web interactions.\n\nOptimal for tasks requiring:\n- Complex reasoning over multiple web pages\n- Nuanced interpretation and flexible decision-making\n- Human-like interaction with detailed context awareness\n\nBest suited use cases include:\n- Multi-step processes requiring reasoning (e.g., detailed registrations or onboarding)\n- Interacting intelligently with advanced web apps\n- Conducting in-depth research with complex conditions\n- Extracting information from dynamic or interactive websites\n\nProvide detailed task instructions, relevant context, and clearly specify the desired outcome for best results. Returns the completed result or an error message if issues arise.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "task": {
                "type": "string",
                "description": "The task to perform inside the browser"
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              },
              "returnStepInfo": {
                "type": "boolean",
                "default": false,
                "description": "Whether to return step-by-step information about the task.Should be false by default. May contain excessive information, so we strongly recommend setting this to false."
              },
              "maxSteps": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "minimum": 1,
                "maximum": 100,
                "default": 25
              }
            },
            "required": [
              "task"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "search_with_bing",
          "description": "Search the web using Bing. This tool allows you to search the web using bing.com",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The search query to submit to Bing"
              },
              "sessionOptions": {
                "type": "object",
                "properties": {
                  "useProxy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use a proxy. Recommended false."
                  },
                  "useStealth": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use stealth mode. Recommended false."
                  },
                  "solveCaptchas": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to solve captchas. Recommended false."
                  },
                  "acceptCookies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically close the accept cookies popup. Recommended false."
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the persistent profile to use for the session"
                      },
                      "persistChanges": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether changes made during the session should be saved to the profile. Recommended true."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Options for using a persistent Hyperbrowser profile"
                  }
                },
                "additionalProperties": false,
                "description": "Options for the browser session. Avoid setting these if not mentioned explicitly"
              },
              "numResults": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "minimum": 1,
                "maximum": 50,
                "default": 10,
                "description": "Number of search results to return"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "create_profile",
          "description": "Creates a new persistent Hyperbrowser profile.",
          "inputSchema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "delete_profile",
          "description": "Deletes an existing persistent Hyperbrowser profile.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "profileId": {
                "type": "string",
                "description": "ID of the profile to delete"
              }
            },
            "required": [
              "profileId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "list_profiles",
          "description": "Lists existing persistent Hyperbrowser profiles, with optional pagination.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "description": "Page number for pagination (optional)"
              },
              "limit": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "description": "Number of profiles per page (optional)"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "resources": [
        {
          "uri": "hyperbrowser:///",
          "name": "Welcome to Hyperbrowser | Hyperbrowser",
          "description": "Hyperbrowser documentation provides an introduction to web scraping and automation using the Hyperbrowser tool.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///what-are-headless-browsers",
          "name": "What are Headless browsers ? | Hyperbrowser",
          "description": "The page explains headless browsers and their role in Hyperbrowser for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///get-started/quickstart/scraping",
          "name": "Scraping | Hyperbrowser",
          "description": "The \"Scraping\" page in Hyperbrowser details how to extract data from websites using the tool's functionalities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///get-started/quickstart/crawling",
          "name": "Crawling | Hyperbrowser",
          "description": "The \"Crawling\" page of Hyperbrowser covers the tool's web scraping capabilities and how to implement them.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///get-started/quickstart",
          "name": "Quickstart | Hyperbrowser",
          "description": "Quickstart guide for Hyperbrowser provides initial setup and functionality instructions for effective web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///get-started/quickstart/puppeteer",
          "name": "Puppeteer | Hyperbrowser",
          "description": "Puppeteer integration with Hyperbrowser enables web scraping and automation through headless browser control.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///get-started/quickstart/playwright",
          "name": "Playwright | Hyperbrowser",
          "description": "The page discusses using Playwright with Hyperbrowser for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///get-started/quickstart/selenium",
          "name": "Selenium | Hyperbrowser",
          "description": "Selenium integration with Hyperbrowser allows for enhanced web scraping and automation capabilities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/overview",
          "name": "Overview | Hyperbrowser",
          "description": "Overview of Hyperbrowser, a tool for web scraping and automation, detailing its features and functionalities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/overview/session-parameters",
          "name": "Session Parameters | Hyperbrowser",
          "description": "This page details session parameters for configuring Hyperbrowser's web scraping and automation features.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/advanced-privacy-and-anti-detection",
          "name": "Advanced Privacy & Anti-Detection | Hyperbrowser",
          "description": "This page discusses Hyperbrowser's advanced privacy features and anti-detection capabilities for web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/profiles",
          "name": "Profiles | Hyperbrowser",
          "description": "The \"Profiles\" page in Hyperbrowser outlines how to manage user profiles for data scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/recordings",
          "name": "Recordings | Hyperbrowser",
          "description": "The page covers Hyperbrowser's recording feature for efficient web scraping and automation processes.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/live-view",
          "name": "Live View | Hyperbrowser",
          "description": "The Live View feature in Hyperbrowser allows real-time monitoring and interaction with web scraping tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///sessions/extensions",
          "name": "Extensions | Hyperbrowser",
          "description": "The page discusses extensions for Hyperbrowser, enhancing its web scraping and automation capabilities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///web-scraping/scrape",
          "name": "Scrape | Hyperbrowser",
          "description": "\"Scrape\" page in Hyperbrowser documentation focuses on scraping data from web pages using the tool's features.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///web-scraping/crawl",
          "name": "Crawl | Hyperbrowser",
          "description": "The page discusses how to utilize Hyperbrowser for effective web crawling.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///web-scraping/extract",
          "name": "Extract | Hyperbrowser",
          "description": "The Extract page of Hyperbrowser provides guidelines for web scraping and data extraction techniques using the tool.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///agents/browser-use",
          "name": "Browser Use | Hyperbrowser",
          "description": "The page discusses using Hyperbrowser for web scraping and automation tasks via browser interactions.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///agents/claude-computer-use",
          "name": "Claude Computer Use | Hyperbrowser",
          "description": "The page provides guidelines on using Claude with Hyperbrowser for effective web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///agents/openai-cua",
          "name": "OpenAI CUA | Hyperbrowser",
          "description": "The page discusses the integration of OpenAI's CUA with Hyperbrowser for enhanced web scraping and automation capabilities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///guides/ai-function-calling",
          "name": "AI Function Calling | Hyperbrowser",
          "description": "The page discusses AI function calling features within Hyperbrowser for enhanced web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///guides/scraping",
          "name": "Scraping | Hyperbrowser",
          "description": "The page covers web scraping techniques and documentation for using Hyperbrowser effectively.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///guides/extract-information-with-an-llm",
          "name": "Extract Information with an LLM | Hyperbrowser",
          "description": "Learn how to extract information using a Large Language Model with Hyperbrowser.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///guides/using-hyperbrowser-session",
          "name": "Using Hyperbrowser Session | Hyperbrowser",
          "description": "The page describes how to use sessions in Hyperbrowser for efficient web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///guides/captcha-solving",
          "name": "CAPTCHA Solving | Hyperbrowser",
          "description": "Hyperbrowser provides tools and guidance for CAPTCHA solving in web scraping and automation processes.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///guides/model-context-protocol",
          "name": "Model Context Protocol | Hyperbrowser",
          "description": "The page covers the Model Context Protocol used in Hyperbrowser for web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks",
          "name": "SDKs | Hyperbrowser",
          "description": "The page discusses Hyperbrowser SDKs for web scraping and automation, including features and usage details.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/node",
          "name": "Node | Hyperbrowser",
          "description": "Overview of the Node module in Hyperbrowser for web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/node/sessions",
          "name": "Sessions | Hyperbrowser",
          "description": "The page discusses sessions in Hyperbrowser, detailing how to manage and utilize them effectively for web scraping tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/node/profiles",
          "name": "Profiles | Hyperbrowser",
          "description": "The \"Profiles\" page of Hyperbrowser covers user profiles and their management within the tool.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/node/scrape",
          "name": "Scrape | Hyperbrowser",
          "description": "The \"Scrape\" page of Hyperbrowser outlines techniques and tools for web scraping and automation.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/node/crawl",
          "name": "Crawl | Hyperbrowser",
          "description": "The \"Crawl\" page of Hyperbrowser details how to use the tool for web scraping and automated data extraction.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/node/extensions",
          "name": "Extensions | Hyperbrowser",
          "description": "The Extensions page for Hyperbrowser details available extensions that enhance web scraping and automation functionalities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/python",
          "name": "Python | Hyperbrowser",
          "description": "The page provides documentation on using Hyperbrowser with Python for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/python/sessions",
          "name": "Sessions | Hyperbrowser",
          "description": "The page discusses managing sessions in Hyperbrowser for effective web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/python/profiles",
          "name": "Profiles | Hyperbrowser",
          "description": "The \"Profiles\" page in Hyperbrowser documentation explains how to manage and use user profiles for web scraping tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/python/scrape",
          "name": "Scrape | Hyperbrowser",
          "description": "The page explains how to use Hyperbrowser for web scraping tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/python/crawl",
          "name": "Crawl | Hyperbrowser",
          "description": "The Crawl section of Hyperbrowser’s documentation explains web scraping techniques and automation processes.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/sdks/python/extensions",
          "name": "Extensions | Hyperbrowser",
          "description": "Explore Hyperbrowser extensions for enhanced web scraping and automation capabilities in your projects.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference",
          "name": "API Reference | Hyperbrowser",
          "description": "API Reference for Hyperbrowser provides detailed information on using its web scraping and automation features.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/sessions",
          "name": "Sessions | Hyperbrowser",
          "description": "The \"Sessions\" page in Hyperbrowser covers managing and utilizing sessions for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/crawl",
          "name": "Crawl | Hyperbrowser",
          "description": "The \"Crawl\" section of Hyperbrowser documentation explains how to use the tool for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/scrape",
          "name": "Scrape | Hyperbrowser",
          "description": "The \"Scrape\" section of Hyperbrowser documentation explains web scraping techniques and automation features of the tool.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/extract",
          "name": "Extract | Hyperbrowser",
          "description": "The Extract page of Hyperbrowser provides guidelines on data extraction methods and tools for web scraping.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/agents",
          "name": "Agents | Hyperbrowser",
          "description": "The \"Agents\" page in Hyperbrowser documentation discusses automated entities for web scraping and task execution.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/agents/browser-use",
          "name": "Browser Use | Hyperbrowser",
          "description": "The page explains how to effectively utilize browser features in Hyperbrowser for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/agents/claude-computer-use",
          "name": "Claude Computer Use | Hyperbrowser",
          "description": "The page discusses using Claude for web scraping and automation with Hyperbrowser tools.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/agents/openai-cua",
          "name": "OpenAI CUA | Hyperbrowser",
          "description": "OpenAI CUA for Hyperbrowser details integration and automation features for effective web scraping.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/profiles",
          "name": "Profiles | Hyperbrowser",
          "description": "The \"Profiles\" page in Hyperbrowser documentation explains how to manage and configure user profiles for scraping tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///reference/api-reference/extensions",
          "name": "Extensions | Hyperbrowser",
          "description": "The page discusses extensions for Hyperbrowser that enhance its web scraping and automation capabilities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///integrations/langchain",
          "name": "LangChain | Hyperbrowser",
          "description": "LangChain integrates with Hyperbrowser for enhanced web scraping and automation capabilities.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///integrations/llamaindex",
          "name": "LlamaIndex | Hyperbrowser",
          "description": "LlamaIndex documentation for integrating with Hyperbrowser for web scraping and automation tasks.",
          "mimeType": "text/markdown"
        },
        {
          "uri": "hyperbrowser:///~gitbook/pdf",
          "name": "Hyperbrowser",
          "description": "Hyperbrowser is a web scraping and automation tool, offering extensive documentation for users.",
          "mimeType": "text/markdown"
        }
      ],
      "prompts": [],
      "status": "online",
      "lastIndexed": "2025-07-30T20:30:07.275Z",
      "connectionTest": {
        "success": true,
        "responseTime": 880,
        "timestamp": "2025-07-30T20:30:07.276Z"
      },
      "searchKeywords": "hyperbrowser hyperbrowser hyperbrowser scrape_webpage crawl_webpages extract_structured_data browser_use_agent openai_computer_use_agent claude_computer_use_agent search_with_bing create_profile delete_profile list_profiles scrape a webpage and extract its content in various formats. this tool allows fetching content from a single url with configurable browser behavior options. use this for extracting text content, html structure, collecting links, or capturing screenshots of webpages. crawl a website starting from a url and explore linked pages. this tool allows systematic collection of content from multiple pages within a domain. use this for larger data collection tasks, content indexing, or site mapping. extract structured data from a webpage. this tool allows you to extract structured data from a webpage using a schema. this tool employs an open-source browser automation agent optimized specifically for fast, efficient, and cost-effective browser tasks using a cloud browser. it requires explicit, detailed instructions to perform highly specific interactions quickly.\n\noptimal for tasks requiring:\n- precise, explicitly defined interactions and actions\n- speed and efficiency with clear, unambiguous instructions\n- cost-effective automation at scale with straightforward workflows\n\nbest suited use cases include:\n- explicitly defined registration and login processes\n- clearly guided navigation through web apps\n- structured, step-by-step web scraping with detailed guidance\n- extracting data via explicitly specified browser interactions\n\nyou must provide extremely detailed step-by-step instructions, including exact elements, actions, and explicit context. clearly define the desired outcome for optimal results. returns the completed result or an error message if issues arise.\n\nnote: this agent trades off flexibility for significantly faster performance and lower costs compared to claude and openai agents. this tool utilizes openai's model to autonomously execute general-purpose browser-based tasks with balanced performance and reliability using a cloud browser. it handles complex interactions effectively with practical reasoning and clear execution.\n\noptimal for tasks requiring:\n- reliable, general-purpose browser automation\n- clear, structured interactions with moderate complexity\n- efficient handling of common web tasks and workflows\n\nbest suited use cases include:\n- standard multi-step registration or form submissions\n- navigating typical web applications requiring multiple interactions\n- conducting structured web research tasks\n- extracting data through interactive web processes\n\nprovide a clear step-by-step description, necessary context, and expected outcomes. returns the completed result or an error message if issues arise. this tool leverages anthropic's claude model to autonomously execute complex browser tasks with sophisticated reasoning capabilities using a cloud browser. it specializes in handling intricate, nuanced, or highly context-sensitive web interactions.\n\noptimal for tasks requiring:\n- complex reasoning over multiple web pages\n- nuanced interpretation and flexible decision-making\n- human-like interaction with detailed context awareness\n\nbest suited use cases include:\n- multi-step processes requiring reasoning (e.g., detailed registrations or onboarding)\n- interacting intelligently with advanced web apps\n- conducting in-depth research with complex conditions\n- extracting information from dynamic or interactive websites\n\nprovide detailed task instructions, relevant context, and clearly specify the desired outcome for best results. returns the completed result or an error message if issues arise. search the web using bing. this tool allows you to search the web using bing.com creates a new persistent hyperbrowser profile. deletes an existing persistent hyperbrowser profile. lists existing persistent hyperbrowser profiles, with optional pagination. registry"
    }
  ]
}